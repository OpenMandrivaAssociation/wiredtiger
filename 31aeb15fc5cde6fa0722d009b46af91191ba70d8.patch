From 31aeb15fc5cde6fa0722d009b46af91191ba70d8 Mon Sep 17 00:00:00 2001
From: Alison Felizzi <76922497+alisonfel@users.noreply.github.com>
Date: Thu, 22 Apr 2021 15:21:04 +1000
Subject: [PATCH] WT-7230 CMake build system support for x86 POSIX targets
 (#6468)

Adds the initial support for building the WiredTiger library with CMake for x86-based POSIX targets (for supported compilers GCC & Clang). The build system is designed to co-exist with autoconf. Autoconf builds still work as expected. Specifically adds the following functionality:
* Compiles the WiredTiger library and extension libraries/modules
* Support for the WiredTiger installation target (e.g 'make install' equivalent)
* Initial documentation on how to build the library with CMake
---
 CMakeLists.txt                                | 114 ++++
 build_cmake/README.md                         | 120 ++++
 build_cmake/configs/auto.cmake                | 304 +++++++++
 build_cmake/configs/base.cmake                | 184 +++++
 .../pthread_cond_monotonic_test.c             |  32 +
 build_cmake/configs/wiredtiger_config.h.in    | 157 +++++
 build_cmake/configs/x86/darwin/config.cmake   |  11 +
 build_cmake/configs/x86/linux/config.cmake    |  19 +
 build_cmake/helpers.cmake                     | 633 ++++++++++++++++++
 build_cmake/install/install.cmake             |  66 ++
 build_cmake/install/wiredtiger.pc.in          |  11 +
 build_cmake/strict/clang_strict.cmake         |  50 ++
 build_cmake/strict/gcc_strict.cmake           |  79 +++
 build_cmake/toolchains/clang.cmake            |  36 +
 build_cmake/toolchains/gcc.cmake              |  31 +
 .../toolchains/x86/darwin/plat_clang.cmake    |  14 +
 .../toolchains/x86/darwin/plat_gcc.cmake      |  14 +
 .../toolchains/x86/linux/plat_clang.cmake     |  14 +
 .../toolchains/x86/linux/plat_gcc.cmake       |   9 +
 ext/CMakeLists.txt                            |  55 ++
 ext/collators/reverse/CMakeLists.txt          |  40 ++
 ext/collators/revint/CMakeLists.txt           |  40 ++
 ext/compressors/lz4/CMakeLists.txt            |  66 ++
 ext/compressors/nop/CMakeLists.txt            |  40 ++
 ext/compressors/snappy/CMakeLists.txt         |  65 ++
 ext/compressors/zlib/CMakeLists.txt           |  65 ++
 ext/compressors/zstd/CMakeLists.txt           |  64 ++
 ext/encryptors/nop/CMakeLists.txt             |  40 ++
 ext/encryptors/rotn/CMakeLists.txt            |  40 ++
 ext/extractors/csv/CMakeLists.txt             |  40 ++
 .../local_store/CMakeLists.txt                |  40 ++
 ext/test/fail_fs/CMakeLists.txt               |  40 ++
 32 files changed, 2533 insertions(+)
 create mode 100644 CMakeLists.txt
 create mode 100644 build_cmake/README.md
 create mode 100644 build_cmake/configs/auto.cmake
 create mode 100644 build_cmake/configs/base.cmake
 create mode 100644 build_cmake/configs/compile_test/pthread_cond_monotonic_test.c
 create mode 100644 build_cmake/configs/wiredtiger_config.h.in
 create mode 100644 build_cmake/configs/x86/darwin/config.cmake
 create mode 100644 build_cmake/configs/x86/linux/config.cmake
 create mode 100644 build_cmake/helpers.cmake
 create mode 100644 build_cmake/install/install.cmake
 create mode 100644 build_cmake/install/wiredtiger.pc.in
 create mode 100644 build_cmake/strict/clang_strict.cmake
 create mode 100644 build_cmake/strict/gcc_strict.cmake
 create mode 100644 build_cmake/toolchains/clang.cmake
 create mode 100644 build_cmake/toolchains/gcc.cmake
 create mode 100644 build_cmake/toolchains/x86/darwin/plat_clang.cmake
 create mode 100644 build_cmake/toolchains/x86/darwin/plat_gcc.cmake
 create mode 100644 build_cmake/toolchains/x86/linux/plat_clang.cmake
 create mode 100644 build_cmake/toolchains/x86/linux/plat_gcc.cmake
 create mode 100644 ext/CMakeLists.txt
 create mode 100644 ext/collators/reverse/CMakeLists.txt
 create mode 100644 ext/collators/revint/CMakeLists.txt
 create mode 100644 ext/compressors/lz4/CMakeLists.txt
 create mode 100644 ext/compressors/nop/CMakeLists.txt
 create mode 100644 ext/compressors/snappy/CMakeLists.txt
 create mode 100644 ext/compressors/zlib/CMakeLists.txt
 create mode 100644 ext/compressors/zstd/CMakeLists.txt
 create mode 100644 ext/encryptors/nop/CMakeLists.txt
 create mode 100644 ext/encryptors/rotn/CMakeLists.txt
 create mode 100644 ext/extractors/csv/CMakeLists.txt
 create mode 100644 ext/storage_sources/local_store/CMakeLists.txt
 create mode 100644 ext/test/fail_fs/CMakeLists.txt

diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 00000000000..90a091a859c
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,114 @@
+#
+# Public Domain 2014-present MongoDB, Inc.
+# Public Domain 2008-2014 WiredTiger, Inc.
+#  All rights reserved.
+#
+# See the file LICENSE for redistribution information.
+#
+
+cmake_minimum_required(VERSION 3.11.0)
+
+# Try to use CCACHE if available - speeds up build times.
+find_program(CCACHE_FOUND ccache)
+if(CCACHE_FOUND)
+    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)
+    set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)
+endif(CCACHE_FOUND)
+
+project(WiredTiger C ASM)
+
+include(build_cmake/helpers.cmake)
+
+# If the user doesn't manually specify the target ARCH and OS (i.e not cross-compiling)
+# we will infer the target from the host.
+if(NOT WT_ARCH)
+    # Defer to our hosts architecture as our target architecture.
+    if ("${CMAKE_HOST_SYSTEM_PROCESSOR}" MATCHES "^(x86_64|i686|i386)$")
+        set(WT_ARCH "x86")
+    else()
+        set(WT_ARCH "${CMAKE_HOST_SYSTEM_PROCESSOR}")
+    endif()
+endif()
+if(NOT WT_OS)
+    # Defer to our hosts OS as our target OS.
+    string(TOLOWER "${CMAKE_HOST_SYSTEM_NAME}" host_os)
+    set(WT_OS "${host_os}")
+endif()
+
+if(NOT EXISTS "${CMAKE_CURRENT_LIST_DIR}/build_cmake/configs/${WT_ARCH}/${WT_OS}/config.cmake")
+    message(FATAL_ERROR "build_cmake/configs/${WT_ARCH}/${WT_OS}/config.cmake does not exist")
+endif()
+
+# Load any configuration variables special to our target.
+include(build_cmake/configs/${WT_ARCH}/${WT_OS}/config.cmake)
+# Load auto-configure variables (e.g. environment-related configs).
+include(build_cmake/configs/auto.cmake)
+# Load WiredTiger related configuration options.
+include(build_cmake/configs/base.cmake)
+
+if(ENABLE_STRICT)
+    if("${CMAKE_C_COMPILER_ID}" STREQUAL "GNU")
+        include(build_cmake/strict/gcc_strict.cmake)
+    elseif("${CMAKE_C_COMPILER_ID}" STREQUAL "Clang" OR "${CMAKE_C_COMPILER_ID}" STREQUAL "AppleClang")
+        include(build_cmake/strict/clang_strict.cmake)
+    endif()
+endif()
+
+set(link_type)
+if(ENABLE_STATIC)
+    set(link_type "STATIC")
+else()
+    set(link_type "SHARED")
+    SET_PROPERTY(GLOBAL PROPERTY TARGET_SUPPORTS_SHARED_LIBS TRUE)
+endif()
+
+# Include the extensions to the build.
+add_subdirectory(ext)
+
+# Collect all the library sources we need to compile from the source filelist.
+parse_filelist_source(${CMAKE_CURRENT_LIST_DIR}/dist/filelist wt_sources)
+# Establish wiredtiger library target
+add_library(wiredtiger ${link_type} ${wt_sources})
+
+# Generate wiredtiger.h include file.
+configure_file(src/include/wiredtiger.in "include/wiredtiger.h" @ONLY)
+# Generate our wiredtiger_config.h include file.
+configure_file(build_cmake/configs/wiredtiger_config.h.in "config/wiredtiger_config.h" @ONLY)
+# Set our targets public and private includes.
+target_include_directories(
+    wiredtiger
+    PUBLIC ${CMAKE_CURRENT_BINARY_DIR}/include
+    PRIVATE ${CMAKE_CURRENT_BINARY_DIR}/config ${CMAKE_CURRENT_LIST_DIR}/src/include
+)
+
+# Ensure we link any available library dependencies to our wiredtiger target.
+if(HAVE_LIBPTHREAD)
+    target_link_libraries(wiredtiger "pthread")
+endif()
+
+if(HAVE_LIBRT)
+    target_link_libraries(wiredtiger "rt")
+endif()
+
+if(HAVE_LIBDL)
+    target_link_libraries(wiredtiger "dl")
+endif()
+
+if(HAVE_BUILTIN_EXTENSION_LZ4)
+    target_link_libraries(wiredtiger wiredtiger_lz4)
+endif()
+
+if(HAVE_BUILTIN_EXTENSION_SNAPPY)
+    target_link_libraries(wiredtiger wiredtiger_snappy)
+endif()
+
+if(HAVE_BUILTIN_EXTENSION_ZLIB)
+    target_link_libraries(wiredtiger wiredtiger_zlib)
+endif()
+
+if(HAVE_BUILTIN_EXTENSION_ZSTD)
+    target_link_libraries(wiredtiger wiredtiger_zstd)
+endif()
+
+# Establish our install target configuration.
+include(build_cmake/install/install.cmake)
diff --git a/build_cmake/README.md b/build_cmake/README.md
new file mode 100644
index 00000000000..370df3732c7
--- /dev/null
+++ b/build_cmake/README.md
@@ -0,0 +1,120 @@
+# Building WiredTiger with CMake
+> *CMake support for building wiredtiger is an active work-in-progress. As of this time CMake can **only** build the WiredTiger library for POSIX platforms (Linux & Darwin) on x86 hosts. We suggest you continue using the autoconf build until further support is added.*
+
+### Build Dependencies
+
+To build with CMake we **require** the following dependencies:
+
+* `cmake` : Official CMake install instructions found here: https://cmake.org/install/
+  * *WiredTiger supports CMake 3.11+*
+* `ninja` : Official ninja install instructions found here: https://ninja-build.org/
+
+We also strongly suggest the following dependencies are also installed (for improved build times):
+
+* `ccache` : Official ccache download instructions found here: https://ccache.dev/download.html
+
+##### Package Manager Instructions
+
+Alternatively you can use your system's package manager to install the dependencies listed above. Depending on the system, the following commands can be run:
+
+###### Install commands for Ubuntu & Debian (tested on Ubuntu 18.04)
+
+```bash
+sudo apt-get install cmake cmake-curses-gui
+sudo apt-get install ccache
+sudo apt-get install ninja-build
+```
+
+###### Install commands for Mac (using HomeBrew)
+
+```bash
+brew install ninja
+brew install ccache
+brew install cmake
+```
+
+
+
+### Building the WiredTiger Library
+
+> *The below commands are written for Linux and Darwin hosts. Windows instructions coming soon!*
+
+Building the WiredTiger library is relatively straightforward. Navigate to the top level of the WiredTiger repository and run the following commands:
+
+###### Configure your build
+
+```bash
+# Create a new directory to run your build from
+$ mkdir build && cd build
+# Run the cmake configure step. Note: '-G Ninja' tells CMake to generate a ninja build
+$ cmake -G Ninja ../.
+...
+-- Configuring done
+-- Generating done
+-- Build files have been written to: /home/wiredtiger/build
+```
+
+*See [Configuration Options](#configuration-options) for additional configuration options.*
+
+###### Run your build
+
+In the same directory you configured your build, run the `ninja` command to start the build:
+
+```bash
+$ ninja
+...
+[211/211 (100%) 2.464s] Creating library symlink libwiredtiger.so
+```
+
+*Note: Ninja doesn't need a `-j` option; it knows how many cores are available.*
+
+###### Configuration Options
+
+There are a number of additional configuration options you can pass to the CMake configuration step. A summary of some important options you will come to know:
+
+* `-DENABLE_STATIC=1` : Compile WiredTiger as a static library
+* `-DENABLE_LZ4=1` : Build the lz4 compressor extension
+* `-DENABLE_SNAPPY=1` : Build the snappy compressor extension
+* `-DENABLE_ZLIB=1` : Build the zlib compressor extension
+* `-DENABLE_ZSTD=1` : Build the libzstd compressor extension
+* `-DHAVE_DIAGNOSTIC=1` : Enable WiredTiger diagnostics
+* `-DHAVE_ATTACH=1` : Enable to pause for debugger attach on failure
+* `-DENABLE_STRICT=1` : Compile with strict compiler warnings enabled
+* `-DCMAKE_INSTALL_PREFIX=<path-to-install-directory>` : Path to install directory
+
+---
+
+An example of using the above configuration options during the configuration step:
+
+```bash
+$ cmake -DENABLE_STATIC=1 -DENABLE_LZ4=1 -DENABLE_SNAPPY=1 -DENABLE_ZLIB=1 -DENABLE_ZSTD=1 -DHAVE_DIAGNOSTIC=1 -DHAVE_ATTACH=1 -DENABLE_STRICT=1 -G Ninja ../.
+```
+
+---
+
+You can further look at all the available configuration options (and also dynamically change them!) by running `ccmake` in your build directory:
+
+```bash
+$ cd build
+$ ccmake .
+```
+
+*The configuration options can also be viewed in `build_cmake/configs/base.cmake`*.
+
+###### Switching between GCC and Clang
+
+By default CMake will use your default system compiler (`cc`). If you want to use a specific toolchain you can pass a toolchain file! We have provided a toolchain file for both GCC (`build_cmake/toolchains/gcc.cmake`) and Clang (`build_cmake/toolchains/clang.cmake`). To use either toolchain you can pass the `-DCMAKE_TOOLCHAIN_FILE=` to the CMake configuration step. For example:
+
+*Using the GCC Toolchain*
+
+```bash
+$ cd build
+$ cmake -DCMAKE_TOOLCHAIN_FILE=../build_cmake/toolchains/gcc.cmake -G Ninja ../.
+```
+
+*Using the Clang Toolchain*
+
+```bash
+$ cd build
+$ cmake -DCMAKE_TOOLCHAIN_FILE=../build_cmake/toolchains/clang.cmake -G Ninja ../.
+```
diff --git a/build_cmake/configs/auto.cmake b/build_cmake/configs/auto.cmake
new file mode 100644
index 00000000000..c3868bbdcd9
--- /dev/null
+++ b/build_cmake/configs/auto.cmake
@@ -0,0 +1,304 @@
+#
+# Public Domain 2014-present MongoDB, Inc.
+# Public Domain 2008-2014 WiredTiger, Inc.
+#  All rights reserved.
+#
+#  See the file LICENSE for redistribution information
+#
+
+include(build_cmake/helpers.cmake)
+
+### Auto configure options and checks that we can infer from our toolchain environment.
+
+## Assert type sizes.
+assert_type_size("size_t" 8)
+assert_type_size("ssize_t" 8)
+assert_type_size("time_t" 8)
+assert_type_size("off_t" 0)
+assert_type_size("uintptr_t" 0)
+test_type_size("uintmax_t" u_intmax_size)
+test_type_size("unsigned long long" u_long_long_size)
+set(default_uintmax_def " ")
+if(${u_intmax_size} STREQUAL "")
+    if(${unsigned long long} STREQUAL "")
+        set(default_uintmax_def "typedef unsigned long uintmax_t\\;")
+    else()
+        set(default_uintmax_def "typedef unsigned long long uintmax_t\\;")
+    endif()
+endif()
+
+config_string(
+    off_t_decl
+    "off_t type declaration."
+    DEFAULT "typedef off_t wt_off_t\\;"
+    INTERNAL
+)
+
+config_string(
+    uintprt_t_decl
+    "uintptr_t type declaration."
+    DEFAULT "${default_uintmax_def}"
+    INTERNAL
+)
+
+config_include(
+    HAVE_SYS_TYPES_H
+    "Include header sys/types.h exists."
+    FILE "sys/types.h"
+)
+
+config_include(
+    HAVE_INTTYPES_H
+    "Include header inttypes.h exists."
+    FILE "inttypes.h"
+)
+
+config_include(
+    HAVE_STDARG_H
+    "Include header stdarg.h exists."
+    FILE "stdarg.h"
+)
+
+config_include(
+    HAVE_STDBOOL_H
+    "Include header stdbool.h exists."
+    FILE "stdbool.h"
+)
+
+config_include(
+    HAVE_STDINT_H
+    "Include header stdint.h exists."
+    FILE "stdint.h"
+)
+
+config_include(
+    HAVE_STDLIB_H
+    "Include header stdlib.h exists."
+    FILE "stdlib.h"
+)
+
+config_include(
+    HAVE_STDIO_H
+    "Include header stdio.h exists."
+    FILE "stdio.h"
+)
+
+config_include(
+    HAVE_STRINGS_H
+    "Include header strings.h exists."
+    FILE "strings.h"
+)
+
+config_include(
+    HAVE_STRING_H
+    "Include header string.h exists."
+    FILE "string.h"
+)
+
+config_include(
+    HAVE_SYS_STAT_H
+    "Include header sys/stat.h exists."
+    FILE "sys/stat.h"
+)
+
+config_include(
+    HAVE_UNISTD_H
+    "Include header unistd.h exists."
+    FILE "unistd.h"
+)
+
+config_include(
+    HAVE_X86INTRIN_H
+    "Include header x86intrin.h exists."
+    FILE "x86intrin.h"
+)
+
+config_include(
+    HAVE_DLFCN_H
+    "Include header dlfcn.h exists."
+    FILE "dlfcn.h"
+)
+
+config_include(
+    HAVE_MEMORY_H
+    "Include header memory.h exists."
+    FILE "memory.h"
+)
+
+config_func(
+    HAVE_CLOCK_GETTIME
+    "Function clock_gettime exists."
+    FUNC "clock_gettime"
+    FILES "time.h"
+)
+
+config_func(
+    HAVE_FALLOCATE
+    "Function fallocate exists."
+    FUNC "fallocate"
+    FILES "fcntl.h"
+)
+
+config_func(
+    HAVE_FDATASYNC
+    "Function fdatasync exists."
+    FUNC "fdatasync"
+    FILES "unistd.h"
+    DEPENDS "NOT WT_DARWIN"
+)
+
+config_func(
+    HAVE_FTRUNCATE
+    "Function ftruncate exists."
+    FUNC "ftruncate"
+    FILES "unistd.h;sys/types.h"
+)
+
+config_func(
+    HAVE_GETTIMEOFDAY
+    "Function gettimeofday exists."
+    FUNC "gettimeofday"
+    FILES "sys/time.h"
+)
+
+config_func(
+    HAVE_POSIX_FADVISE
+    "Function posix_fadvise exists."
+    FUNC "posix_fadvise"
+    FILES "fcntl.h"
+)
+
+config_func(
+    HAVE_POSIX_FALLOCATE
+    "Function posix_fallocate exists."
+    FUNC "posix_fallocate"
+    FILES "fcntl.h"
+)
+
+config_func(
+    HAVE_POSIX_MADVISE
+    "Function posix_madvise exists."
+    FUNC "posix_madvise"
+    FILES "sys/mman.h"
+)
+
+config_func(
+    HAVE_POSIX_MEMALIGN
+    "Function posix_memalign exists."
+    FUNC "posix_memalign"
+    FILES "stdlib.h"
+)
+
+config_func(
+    HAVE_SETRLIMIT
+    "Function setrlimit exists."
+    FUNC "setrlimit"
+    FILES "sys/time.h;sys/resource.h"
+)
+
+config_func(
+    HAVE_STRTOUQ
+    "Function strtouq exists."
+    FUNC "strtouq"
+    FILES "stdlib.h"
+)
+
+config_func(
+    HAVE_SYNC_FILE_RANGE
+    "Function sync_file_range exists."
+    FUNC "sync_file_range"
+    FILES "fcntl.h"
+)
+
+config_func(
+    HAVE_TIMER_CREATE
+    "Function timer_create exists."
+    FUNC "timer_create"
+    FILES "signal.h;time.h"
+    LIBS "rt"
+)
+
+config_lib(
+    HAVE_LIBPTHREAD
+    "Pthread library exists."
+    LIB "pthread"
+    FUNC "pthread_create"
+)
+
+config_lib(
+    HAVE_LIBRT
+    "rt library exists."
+    LIB "rt"
+    FUNC "timer_create"
+)
+
+config_lib(
+    HAVE_LIBDL
+    "dl library exists."
+    LIB "dl"
+    FUNC "dlopen"
+)
+
+config_lib(
+    HAVE_LIBLZ4
+    "lz4 library exists."
+    LIB "lz4"
+    FUNC "LZ4_versionNumber"
+)
+
+config_lib(
+    HAVE_LIBSNAPPY
+    "snappy library exists."
+    LIB "snappy"
+    FUNC "snappy_compress"
+)
+
+config_lib(
+    HAVE_LIBZ
+    "zlib library exists."
+    LIB "z"
+    FUNC "zlibVersion"
+)
+
+config_lib(
+    HAVE_LIBZSTD
+    "zstd library exists."
+    LIB "zstd"
+    FUNC "ZSTD_versionString"
+)
+
+config_lib(
+    HAVE_LIBTCMALLOC
+    "tcmalloc library exists."
+    LIB "tcmalloc"
+    FUNC "tc_malloc"
+)
+
+config_compile(
+    HAVE_PTHREAD_COND_MONOTONIC
+    "If pthread condition variables support monotonic clocks."
+    SOURCE "${CMAKE_CURRENT_LIST_DIR}/compile_test/pthread_cond_monotonic_test.c"
+    LIBS "pthread"
+    DEPENDS "HAVE_LIBPTHREAD"
+)
+
+set(wiredtiger_includes_decl)
+if(HAVE_SYS_TYPES_H)
+    list(APPEND wiredtiger_includes_decl "#include <sys/types.h>")
+endif()
+if(HAVE_INTTYPES_H)
+    list(APPEND wiredtiger_includes_decl "#include <inttypes.h>")
+endif()
+if(HAVE_STDARG_H)
+    list(APPEND wiredtiger_includes_decl "#include <stdarg.h>")
+endif()
+if(HAVE_STDBOOL_H)
+    list(APPEND wiredtiger_includes_decl "#include <stdbool.h>")
+endif()
+if(HAVE_STDINT_H)
+    list(APPEND wiredtiger_includes_decl "#include <stdint.h>")
+endif()
+if(HAVE_STDIO_H)
+    list(APPEND wiredtiger_includes_decl "#include <stdio.h>")
+endif()
+string(REGEX REPLACE ";" "\n" wiredtiger_includes_decl "${wiredtiger_includes_decl}")
diff --git a/build_cmake/configs/base.cmake b/build_cmake/configs/base.cmake
new file mode 100644
index 00000000000..20ae0a319d0
--- /dev/null
+++ b/build_cmake/configs/base.cmake
@@ -0,0 +1,184 @@
+#
+# Public Domain 2014-present MongoDB, Inc.
+# Public Domain 2008-2014 WiredTiger, Inc.
+#  All rights reserved.
+#
+#  See the file LICENSE for redistribution information
+#
+
+include(build_cmake/helpers.cmake)
+
+# WiredTiger-related configuration options.
+
+config_choice(
+    WT_ARCH
+    "Target architecture for WiredTiger"
+    OPTIONS
+        "x86;WT_X86;"
+        "arm64;WT_ARM64;"
+        "ppc64;WT_PPC64;"
+        "zseries;WT_ZSERIES;"
+)
+
+config_choice(
+    WT_OS
+    "Target OS for WiredTiger"
+    OPTIONS
+        "darwin;WT_DARWIN;"
+        "windows;WT_WIN;"
+        "linux;WT_LINUX;"
+)
+
+config_bool(
+    WT_POSIX
+    "Is a posix platform"
+    DEFAULT ON
+    DEPENDS "WT_LINUX OR WT_DARWIN"
+)
+
+config_string(
+    WT_BUFFER_ALIGNMENT_DEFAULT
+    "WiredTiger buffer boundary aligment"
+    DEFAULT 0
+)
+
+config_bool(
+    HAVE_DIAGNOSTIC
+    "Enable WiredTiger diagnostics"
+    DEFAULT OFF
+)
+
+config_bool(
+    HAVE_ATTACH
+    "Enable to pause for debugger attach on failure"
+    DEFAULT OFF
+)
+
+config_bool(
+    ENABLE_STATIC
+    "Compile as a static library"
+    DEFAULT OFF
+)
+
+config_bool(
+    ENABLE_STRICT
+    "Compile with strict compiler warnings enabled"
+    DEFAULT ON
+)
+
+config_bool(
+    ENABLE_PYTHON
+    "Configure the python API"
+    DEFAULT OFF
+    DEPENDS "NOT ENABLE_STATIC"
+)
+
+config_bool(
+    WT_STANDALONE_BUILD
+    "Support standalone build"
+    DEFAULT ON
+)
+
+config_bool(
+    HAVE_NO_CRC32_HARDWARE
+    "Disable any crc32 hardware support"
+    DEFAULT OFF
+)
+
+config_choice(
+    SPINLOCK_TYPE
+    "Set a spinlock type"
+    OPTIONS
+        "pthread;SPINLOCK_PTHREAD_MUTEX;HAVE_LIBPTHREAD"
+        "gcc;SPINLOCK_GCC;"
+        "msvc;SPINLOCK_MSVC;WT_WIN"
+        "pthread_adaptive;SPINLOCK_PTHREAD_ADAPTIVE;HAVE_LIBPTHREAD"
+)
+
+config_bool(
+    ENABLE_LZ4
+    "Build the lz4 compressor extension"
+    DEFAULT OFF
+    DEPENDS "HAVE_LIBLZ4"
+    # Specifically throw a fatal error if a user tries to enable the lz4 compressor without
+    # actually having the library available (as opposed to silently defaulting to OFF).
+    DEPENDS_ERROR ON "Failed to find lz4 library"
+)
+
+config_bool(
+    ENABLE_SNAPPY
+    "Build the snappy compressor extension"
+    DEFAULT OFF
+    DEPENDS "HAVE_LIBSNAPPY"
+    # Specifically throw a fatal error if a user tries to enable the snappy compressor without
+    # actually having the library available (as opposed to silently defaulting to OFF).
+    DEPENDS_ERROR ON "Failed to find snappy library"
+)
+
+config_bool(
+    ENABLE_ZLIB
+    "Build the zlib compressor extension"
+    DEFAULT OFF
+    DEPENDS "HAVE_LIBZ"
+    # Specifically throw a fatal error if a user tries to enable the zlib compressor without
+    # actually having the library available (as opposed to silently defaulting to OFF).
+    DEPENDS_ERROR ON "Failed to find zlib library"
+)
+
+config_bool(
+    ENABLE_ZSTD
+    "Build the libzstd compressor extension"
+    DEFAULT OFF
+    DEPENDS "HAVE_LIBZSTD"
+    # Specifically throw a fatal error if a user tries to enable the zstd compressor without
+    # actually having the library available (as opposed to silently defaulting to OFF).
+    DEPENDS_ERROR ON "Failed to find zstd library"
+)
+
+config_bool(
+    ENABLE_TCMALLOC
+    "Use TCMalloc as the backend allocator"
+    DEFAULT OFF
+    DEPENDS "HAVE_LIBTCMALLOC"
+    # Specifically throw a fatal error if a user tries to enable the tcmalloc allocator without
+    # actually having the library available (as opposed to silently defaulting to OFF).
+    DEPENDS_ERROR ON "Failed to find tcmalloc library"
+)
+
+config_string(
+    CC_OPTIMIZE_LEVEL
+    "CC optimization level"
+    DEFAULT "-O3"
+)
+
+config_string(
+    VERSION_MAJOR
+    "Major version number for WiredTiger"
+    DEFAULT 10
+)
+
+config_string(
+    VERSION_MINOR
+    "Minor version number for WiredTiger"
+    DEFAULT 0
+)
+
+config_string(
+    VERSION_PATCH
+    "Path version number for WiredTiger"
+    DEFAULT 0
+)
+
+
+string(TIMESTAMP config_date "%Y-%m-%d")
+config_string(
+    VERSION_STRING
+    "Version string for WiredTiger"
+    DEFAULT "\"WiredTiger 10.0.0 (${config_date})\""
+)
+
+if(HAVE_DIAGNOSTIC)
+    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g" CACHE STRING "" FORCE)
+endif()
+
+set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${CC_OPTIMIZE_LEVEL}" CACHE STRING "" FORCE)
diff --git a/build_cmake/configs/compile_test/pthread_cond_monotonic_test.c b/build_cmake/configs/compile_test/pthread_cond_monotonic_test.c
new file mode 100644
index 00000000000..94a842dc450
--- /dev/null
+++ b/build_cmake/configs/compile_test/pthread_cond_monotonic_test.c
@@ -0,0 +1,32 @@
+#include <errno.h>
+#include <pthread.h>
+#include <stdlib.h>
+#include <time.h>
+
+int
+main()
+{
+    int ret;
+    pthread_condattr_t condattr;
+    pthread_cond_t cond;
+    pthread_mutex_t mtx;
+    struct timespec ts;
+
+    if ((ret = pthread_condattr_init(&condattr)) != 0)
+        exit(1);
+    if ((ret = pthread_condattr_setclock(&condattr, CLOCK_MONOTONIC)) != 0)
+        exit(1);
+    if ((ret = pthread_cond_init(&cond, &condattr)) != 0)
+        exit(1);
+    if ((ret = pthread_mutex_init(&mtx, NULL)) != 0)
+        exit(1);
+    if ((ret = clock_gettime(CLOCK_MONOTONIC, &ts)) != 0)
+        exit(1);
+    ts.tv_sec += 1;
+    if ((ret = pthread_mutex_lock(&mtx)) != 0)
+        exit(1);
+    if ((ret = pthread_cond_timedwait(&cond, &mtx, &ts)) != 0 && ret != EINTR && ret != ETIMEDOUT)
+        exit(1);
+
+    exit(0);
+}
diff --git a/build_cmake/configs/wiredtiger_config.h.in b/build_cmake/configs/wiredtiger_config.h.in
new file mode 100644
index 00000000000..460a90d0e29
--- /dev/null
+++ b/build_cmake/configs/wiredtiger_config.h.in
@@ -0,0 +1,157 @@
+/*-
+ * Copyright (c) 2014-present MongoDB, Inc.
+ * Copyright (c) 2008-2014 WiredTiger, Inc.
+ *  All rights reserved.
+ *
+ * See the file LICENSE for redistribution information.
+ */
+
+#ifndef __WIREDTIGER_CONFIG_H_
+#define __WIREDTIGER_CONFIG_H_
+
+/* Define to 1 to pause for debugger attach on failure. */
+#cmakedefine HAVE_ATTACH 1
+
+/* LZ4 support automatically loaded. */
+#cmakedefine HAVE_BUILTIN_EXTENSION_LZ4 1
+
+/* Snappy support automatically loaded. */
+#cmakedefine HAVE_BUILTIN_EXTENSION_SNAPPY 1
+
+/* ZLIB support automatically loaded. */
+#cmakedefine HAVE_BUILTIN_EXTENSION_ZLIB 1
+
+/* ZSTD support automatically loaded. */
+#cmakedefine HAVE_BUILTIN_EXTENSION_ZSTD 1
+
+/* Define to 1 if you have the `clock_gettime' function. */
+#cmakedefine HAVE_CLOCK_GETTIME 1
+
+/* Define to 1 for diagnostic tests. */
+#cmakedefine HAVE_DIAGNOSTIC 1
+
+/* Define to 1 if you have the <dlfcn.h> header file. */
+#cmakedefine HAVE_DLFCN_H 1
+
+/* Define to 1 if you have the `fallocate' function. */
+#cmakedefine HAVE_FALLOCATE 1
+
+/* Define to 1 if you have the `fdatasync' function. */
+#cmakedefine HAVE_FDATASYNC 1
+
+/* Define to 1 if you have the `ftruncate' function. */
+#cmakedefine HAVE_FTRUNCATE 1
+
+/* Define to 1 if you have the `gettimeofday' function. */
+#cmakedefine HAVE_GETTIMEOFDAY 1
+
+/* Define to 1 if you have the <inttypes.h> header file. */
+#cmakedefine HAVE_INTTYPES_H 1
+
+/* Define to 1 if you have the `dl' library (-ldl). */
+#cmakedefine HAVE_LIBDL 1
+
+/* Define to 1 if you have the `lz4' library (-llz4). */
+#cmakedefine HAVE_LIBLZ4 1
+
+/* Define to 1 if you have the `pthread' library (-lpthread). */
+#cmakedefine HAVE_LIBPTHREAD 1
+
+/* Define to 1 if you have the `rt' library (-lrt). */
+#cmakedefine HAVE_LIBRT 1
+
+/* Define to 1 if you have the `snappy' library (-lsnappy). */
+#cmakedefine HAVE_LIBSNAPPY 1
+
+/* Define to 1 if you have the `tcmalloc' library (-ltcmalloc). */
+#cmakedefine HAVE_LIBTCMALLOC 1
+
+/* Define to 1 if you have the `z' library (-lz). */
+#cmakedefine HAVE_LIBZ 1
+
+/* Define to 1 if you have the `zstd' library (-lzstd). */
+#cmakedefine HAVE_LIBZSTD 1
+
+/* Define to 1 if you have the <memory.h> header file. */
+#cmakedefine HAVE_MEMORY_H 1
+
+/* Define to 1 to disable any crc32 hardware support. */
+#cmakedefine HAVE_NO_CRC32_HARDWARE
+
+/* Define to 1 if you have the `posix_fadvise' function. */
+#cmakedefine HAVE_POSIX_FADVISE 1
+
+/* Define to 1 if you have the `posix_fallocate' function. */
+#cmakedefine HAVE_POSIX_FALLOCATE 1
+
+/* Define to 1 if you have the `posix_madvise' function. */
+#cmakedefine HAVE_POSIX_MADVISE 1
+
+/* Define to 1 if `posix_memalign' works. */
+#cmakedefine HAVE_POSIX_MEMALIGN 1
+
+/* Define to 1 if pthread condition variables support monotonic clocks. */
+#cmakedefine HAVE_PTHREAD_COND_MONOTONIC 1;
+
+/* Define to 1 if you have the `setrlimit' function. */
+#cmakedefine HAVE_SETRLIMIT 1
+
+/* Define to 1 if you have the <stdint.h> header file. */
+#cmakedefine HAVE_STDINT_H 1
+
+/* Define to 1 if you have the <stdlib.h> header file. */
+#cmakedefine HAVE_STDLIB_H 1
+
+/* Define to 1 if you have the <strings.h> header file. */
+#cmakedefine HAVE_STRINGS_H 1
+
+/* Define to 1 if you have the <string.h> header file. */
+#cmakedefine HAVE_STRING_H 1
+
+/* Define to 1 if you have the `strtouq' function. */
+#cmakedefine HAVE_STRTOUQ 1
+
+/* Define to 1 if you have the `sync_file_range' function. */
+#cmakedefine HAVE_SYNC_FILE_RANGE 1
+
+/* Define to 1 if you have the <sys/stat.h> header file. */
+#cmakedefine HAVE_SYS_STAT_H 1
+
+/* Define to 1 if you have the `timer_create' function. */
+#cmakedefine HAVE_TIMER_CREATE 1
+
+/* Define to 1 if you have the <unistd.h> header file. */
+#cmakedefine HAVE_UNISTD_H 1
+
+/* Define to 1 if you have the <x86intrin.h> header file. */
+#cmakedefine HAVE_X86INTRIN_H 1
+
+/* Spinlock type from mutex.h. */
+#cmakedefine SPINLOCK_TYPE @SPINLOCK_TYPE_CONFIG_VAR@
+
+/* Version number of package */
+#define VERSION "@VERSION_MAJOR@.@VERSION_MINOR@.@VERSION_PATCH@"
+
+/* Define WORDS_BIGENDIAN to 1 if your processor stores words with the most
+   significant byte first (like Motorola and SPARC, unlike Intel). */
+#if defined AC_APPLE_UNIVERSAL_BUILD
+# if defined __BIG_ENDIAN__
+#  define WORDS_BIGENDIAN 1
+# endif
+#else
+# ifndef WORDS_BIGENDIAN
+/* #  undef WORDS_BIGENDIAN */
+# endif
+#endif
+
+/* Default alignment of buffers used for I/O. */
+#define WT_BUFFER_ALIGNMENT_DEFAULT @WT_BUFFER_ALIGNMENT_DEFAULT@
+
+/* Define to 1 to support standalone build. */
+#cmakedefine WT_STANDALONE_BUILD 1
+
+#ifndef _DARWIN_USE_64_BIT_INODE
+# define _DARWIN_USE_64_BIT_INODE 1
+#endif
+
+#endif
diff --git a/build_cmake/configs/x86/darwin/config.cmake b/build_cmake/configs/x86/darwin/config.cmake
new file mode 100644
index 00000000000..2d3f7ead67a
--- /dev/null
+++ b/build_cmake/configs/x86/darwin/config.cmake
@@ -0,0 +1,11 @@
+#
+# Public Domain 2014-present MongoDB, Inc.
+# Public Domain 2008-2014 WiredTiger, Inc.
+#  All rights reserved.
+#
+#  See the file LICENSE for redistribution information
+#
+
+set(WT_ARCH "x86" CACHE STRING "")
+set(WT_OS "darwin" CACHE STRING "")
+set(WT_POSIX ON CACHE BOOL "")
diff --git a/build_cmake/configs/x86/linux/config.cmake b/build_cmake/configs/x86/linux/config.cmake
new file mode 100644
index 00000000000..e7d5742fb27
--- /dev/null
+++ b/build_cmake/configs/x86/linux/config.cmake
@@ -0,0 +1,19 @@
+#
+# Public Domain 2014-present MongoDB, Inc.
+# Public Domain 2008-2014 WiredTiger, Inc.
+#  All rights reserved.
+#
+#  See the file LICENSE for redistribution information
+#
+
+set(WT_ARCH "x86" CACHE STRING "")
+set(WT_OS "linux" CACHE STRING "")
+set(WT_POSIX ON CACHE BOOL "")
+
+# Linux requires '_GNU_SOURCE' to be defined for access to GNU/Linux extension functions
+# e.g. Access to O_DIRECT on Linux. Append this macro to our compiler flags for Linux-based
+# builds.
+set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_GNU_SOURCE" CACHE STRING "" FORCE)
+
+# Linux requires buffers aligned to 4KB boundaries for O_DIRECT to work.
+set(WT_BUFFER_ALIGNMENT_DEFAULT "4096" CACHE STRING "")
diff --git a/build_cmake/helpers.cmake b/build_cmake/helpers.cmake
new file mode 100644
index 00000000000..896518f92f5
--- /dev/null
+++ b/build_cmake/helpers.cmake
@@ -0,0 +1,633 @@
+#
+# Public Domain 2014-present MongoDB, Inc.
+# Public Domain 2008-2014 WiredTiger, Inc.
+#  All rights reserved.
+#
+#  See the file LICENSE for redistribution information
+#
+
+include(CheckIncludeFiles)
+include(CheckSymbolExists)
+include(CheckLibraryExists)
+include(CheckTypeSize)
+
+# Helper function for evaluating a list of dependencies. Mostly used by the
+# "config_X" helpers to evaluate the dependencies required to enable the config
+# option.
+#   depends - a list (semicolon seperated) of dependencies to evaluate.
+#   enabled - name of the output variable set with either 'ON' or 'OFF' (based
+#             on evaluated dependencies). Output variable is set in the callers scope.
+function(eval_dependency depends enabled)
+    # If no dependencies were given then we default to an enabled state.
+    if(("${depends}" STREQUAL "") OR ("${depends}" STREQUAL "NOTFOUND"))
+        set(enabled ON PARENT_SCOPE)
+        return()
+    endif()
+    # Evaluate each dependency.
+    set(is_enabled ON)
+    foreach(dependency ${depends})
+        string(REGEX REPLACE " +" ";" dependency "${dependency}")
+        if(NOT (${dependency}))
+            set(is_enabled OFF)
+            break()
+        endif()
+    endforeach()
+    set(enabled ${is_enabled} PARENT_SCOPE)
+endfunction()
+
+# config_string(config_name description DEFAULT <default string> [DEPENDS <deps>] [INTERNAL])
+# Defines a string configuration option. The configuration option is stored in the cmake cache
+# and can be exported to the wiredtiger config header.
+#   config_name - name of the configuration option.
+#   description - docstring to describe the configuration option (viewable in the cmake-gui).
+#   DEFAULT <default string> -  Default value of the configuration string. Used when not manually set
+#       by a cmake script or in the cmake-gui.
+#   DEPENDS <deps> - list of dependencies (semicolon seperated) required for the configuration string
+#       to be present and set in the cache. If any of the dependencies aren't met, the
+#       configuration value won't be present in the cache.
+#   INTERNAL - hides the configuration option from the cmake-gui by default. Useful if you don't want
+#       to expose the variable by default to the user i.e keep it internal to the implementation
+#       (but still need it in the cache).
+function(config_string config_name description)
+    cmake_parse_arguments(
+        PARSE_ARGV
+        2
+        "CONFIG_STR"
+        "INTERNAL"
+        "DEFAULT;DEPENDS"
+        ""
+    )
+
+    if (NOT "${CONFIG_STR_UNPARSED_ARGUMENTS}" STREQUAL "")
+        message(FATAL_ERROR "Unknown arguments to config_str: ${CONFIG_STR_UNPARSED_ARGUMENTS}")
+    endif()
+    # We require a default value (not optional).
+    if ("${CONFIG_STR_DEFAULT}" STREQUAL "")
+        message(FATAL_ERROR "No default value passed")
+    endif()
+
+    # Check that the configs dependencies are enabled before setting it to a visible enabled state.
+    eval_dependency("${CONFIG_STR_DEPENDS}" enabled)
+    set(default_value "${CONFIG_STR_DEFAULT}")
+    if(enabled)
+        # Set an internal cache variable "${config_name}_DISABLED" to capture its enabled/disabled state
+        # We want to ensure we capture a transition from a disabled to enabled state when dependencies are met.
+        if(${config_name}_DISABLED)
+            unset(${config_name}_DISABLED CACHE)
+            set(${config_name} ${default_value} CACHE STRING "${description}" FORCE)
+        else()
+            set(${config_name} ${default_value} CACHE STRING "${description}")
+        endif()
+        if (CONFIG_STR_INTERNAL)
+            # Mark as an advanced variable, hiding it from initial UI's views.
+            mark_as_advanced(FORCE ${config_name})
+        endif()
+    else()
+        # Config doesn't meet dependency requirements, remove it from the cache and flag it as disabled.
+        unset(${config_name} CACHE)
+        set(${config_name}_DISABLED ON CACHE INTERNAL "" FORCE)
+    endif()
+endfunction()
+
+# config_choice(config_name description OPTIONS <opts>)
+# Defines a configuration option, bounded with pre-set toggleable values. The configuration option is stored
+# in the cmake cache and can be exported to the wiredtiger config header. We default to the first *available* option in the
+# list if the config has not been manually set by a cmake script or in the cmake-gui.
+#   config_name - name of the configuration option.
+#   description - docstring to describe the configuration option (viewable in the cmake-gui).
+#   OPTIONS - a list of option values that the configuration option can be set to. Each option is itself a semicolon
+#       seperated list consisting of "<option-name>;<config-name>;<option-dependencies>".
+#       * option-name: name of the given option stored in the ${config_name} cache variable and presented
+#           to users in the gui (usually something understandable).
+#       * config-name: an additional cached configuration variable that is made available if the option is selected.
+#           It is only present if the option is chosen, otherwise it is unset.
+#       *  option-dependencies: dependencies required for the option to be made available. If its dependencies aren't met
+#           the given option will become un-selectable.
+function(config_choice config_name description)
+    cmake_parse_arguments(
+        PARSE_ARGV
+        2
+        "CONFIG_OPT"
+        ""
+        ""
+        "OPTIONS"
+    )
+
+    if (NOT "${CONFIG_OPT_UNPARSED_ARGUMENTS}" STREQUAL "")
+        message(FATAL_ERROR "Unknown arguments to config_opt: ${CONFIG_OPT_UNPARSED_ARGUMENTS}")
+    endif()
+    # We require option values (not optional)
+    if ("${CONFIG_OPT_OPTIONS}" STREQUAL "")
+        message(FATAL_ERROR "No options passed")
+    endif()
+
+    set(found_option ON)
+    set(found_pre_set OFF)
+    set(default_config_field "")
+    set(default_config_var "")
+    foreach(curr_option ${CONFIG_OPT_OPTIONS})
+        list(LENGTH curr_option opt_length)
+        if (NOT opt_length EQUAL 3)
+            message(FATAL_ERROR "Invalid option format: ${curr_option}")
+        endif()
+        # We expect three items defined for each option.
+        list(GET curr_option 0 option_config_field)
+        list(GET curr_option 1 option_config_var)
+        list(GET curr_option 2 option_depends)
+        # Check that the options dependencies are enabled before setting it to a selectable state.
+        eval_dependency("${option_depends}" enabled)
+        if(enabled)
+            list(APPEND all_option_config_fields ${option_config_field})
+            # The first valid/selectable option found will be the default config value.
+            if (found_option)
+                set(found_option OFF)
+                set(default_config_field "${option_config_field}")
+                set(default_config_var "${option_config_var}")
+            endif()
+            # Check if the option is already set with this given field. We don't want to override the configs value
+            # with a default value if its already been pre-set in the cache e.g. by early config scripts.
+            if("${${config_name}}" STREQUAL "${option_config_field}")
+                set(${option_config_var} ON CACHE INTERNAL "" FORCE)
+                set(${config_name}_CONFIG_VAR ${option_config_var} CACHE INTERNAL "" FORCE)
+                set(found_pre_set ON)
+                set(found_option OFF)
+                set(default_config_field "${option_config_field}")
+                set(default_config_var "${option_config_var}")
+            else()
+                # Clear the cache of the current set value.
+                set(${option_config_var} OFF CACHE INTERNAL "" FORCE)
+            endif()
+        else()
+            unset(${option_config_var} CACHE)
+            # Check if the option is already set with this given field - we want to clear it if so.
+            if ("${${config_name}_CONFIG_VAR}" STREQUAL "${option_config_var}")
+                unset(${config_name}_CONFIG_VAR CACHE)
+            endif()
+            if("${${config_name}}" STREQUAL "${option_config_field}")
+                unset(${config_name} CACHE)
+            endif()
+        endif()
+    endforeach()
+    # If the config hasn't been set we can load it with the default option found earlier.
+    if(NOT found_pre_set)
+        set(${default_config_var} ON CACHE INTERNAL "" FORCE)
+        set(${config_name} ${default_config_field} CACHE STRING ${description})
+        set(${config_name}_CONFIG_VAR ${default_config_var} CACHE INTERNAL "" FORCE)
+    endif()
+    set_property(CACHE ${config_name} PROPERTY STRINGS ${all_option_config_fields})
+endfunction()
+
+# config_bool(config_name description DEFAULT <default-value> [DEPENDS <deps>] [DEPENDS_ERROR <config-val> <error-string>])
+# Defines a boolean (ON/OFF) configuration option . The configuration option is stored in the cmake cache
+# and can be exported to the wiredtiger config header.
+#   config_name - name of the configuration option.
+#   description - docstring to describe the configuration option (viewable in the cmake-gui).
+#   DEFAULT <default-value> -  default value of the configuration bool (ON/OFF). Used when not manually set
+#       by a cmake script or in the cmake-gui or when dependencies aren't met.
+#   DEPENDS <deps> - list of dependencies (semicolon seperated) required for the configuration bool
+#       to be set to the desired value. If any of the dependencies aren't met the configuration value
+#       will be set to its default value.
+#   DEPENDS_ERROR <config-val> <error-string> - specifically throw a fatal error when the configuration option is set to
+#       <config-val> despite failing on its dependencies. This is mainly used for commandline-like options where you want
+#       to signal a specific error to the caller when dependencies aren't met e.g. toolchain is missing library (as opposed to
+#       silently defaulting).
+function(config_bool config_name description)
+    cmake_parse_arguments(
+        PARSE_ARGV
+        2
+        "CONFIG_BOOL"
+        ""
+        "DEFAULT;DEPENDS"
+        "DEPENDS_ERROR"
+    )
+
+    if(NOT "${CONFIG_BOOL_UNPARSED_ARGUMENTS}" STREQUAL "")
+        message(FATAL_ERROR "Unknown arguments to config_bool: ${CONFIG_BOOL_UNPARSED_ARGUMENTS}")
+    endif()
+    # We require a default value (not optional).
+    if("${CONFIG_BOOL_DEFAULT}" STREQUAL "")
+        message(FATAL_ERROR "No default value passed")
+    endif()
+
+    set(depends_err_value)
+    set(depends_err_message "")
+    # If DEPENDS_ERROR is specifically set, parse the value we want to throw an error on if the dependency fails.
+    if(CONFIG_BOOL_DEPENDS_ERROR)
+        list(LENGTH CONFIG_BOOL_DEPENDS_ERROR depends_error_length)
+        if(NOT depends_error_length EQUAL 2)
+            message(FATAL_ERROR "Invalid usage of DEPENDS_ERROR: requires <Error Value> <Error Message>")
+        else()
+            list(GET CONFIG_BOOL_DEPENDS_ERROR 0 err_val)
+            if(err_val)
+                set(depends_err_value "1")
+            else()
+                set(depends_err_value "0")
+            endif()
+            list(GET CONFIG_BOOL_DEPENDS_ERROR 1 depends_err_message)
+        endif()
+    endif()
+
+    # Check that the configs dependencies are enabled before setting it to a visible enabled state.
+    eval_dependency("${CONFIG_BOOL_DEPENDS}" enabled)
+    if(enabled)
+        # Set an internal cache variable "${config_name}_DISABLED" to capture its enabled/disabled state.
+        # We want to ensure we capture a transition from a disabled to enabled state when dependencies are met.
+        if(${config_name}_DISABLED)
+            unset(${config_name}_DISABLED CACHE)
+            set(${config_name} ${CONFIG_BOOL_DEFAULT} CACHE STRING "${description}" FORCE)
+        else()
+            set(${config_name} ${CONFIG_BOOL_DEFAULT} CACHE STRING "${description}")
+        endif()
+    else()
+        set(config_value "0")
+        if (${${config_name}})
+            set(config_value "1")
+        endif()
+        # If the user tries to set the config option to a given value when its dependencies
+        # are not met, throw an error (when DEPENDS_ERROR is explicitly set).
+        if(CONFIG_BOOL_DEPENDS_ERROR)
+            if(${depends_err_value} EQUAL ${config_value})
+                message(FATAL_ERROR "Unable to set ${config_name}: ${depends_err_message}")
+            endif()
+        endif()
+        # Config doesn't meet dependency requirements, set its default state and flag it as disabled.
+        set(${config_name} ${CONFIG_BOOL_DEFAULT} CACHE STRING "${description}" FORCE)
+        set(${config_name}_DISABLED ON CACHE INTERNAL "" FORCE)
+    endif()
+endfunction()
+
+# config_func(config_name description FUNC <function-symbol> FILE <include-header> [DEPENDS <deps>] [LIBS <library-dependencies>])
+# Defines a boolean (0/1) configuration option based on whether a given function symbol exists.
+# The configuration option is stored in the cmake cache and can be exported to the wiredtiger config header.
+#   config_name - name of the configuration option.
+#   description - docstring to describe the configuration option (viewable in the cmake-gui).
+#   FUNC <function-symbol> - function symbol we want to search for.
+#   FILE <include-header> - header we expect the function symbol to be defined e.g a std header.
+#   DEPENDS <deps> - list of dependencies (semicolon seperated) required for the configuration to be evaluated.
+#       If any of the dependencies aren't met the configuration value will be set to '0' (false).
+#   LIBS <library-dependencies> - a list of any additional library dependencies needed to successfully link with the function symbol.
+function(config_func config_name description)
+    cmake_parse_arguments(
+        PARSE_ARGV
+        2
+        "CONFIG_FUNC"
+        ""
+        "FUNC;DEPENDS;FILES;LIBS"
+        ""
+    )
+
+    if (NOT "${CONFIG_FUNC_UNPARSED_ARGUMENTS}" STREQUAL "")
+        message(FATAL_ERROR "Unknown arguments to config_func: ${CONFIG_FUNC_UNPARSED_ARGUMENTS}")
+    endif()
+    # We require an include header (not optional).
+    if ("${CONFIG_FUNC_FILES}" STREQUAL "")
+        message(FATAL_ERROR "No file list passed")
+    endif()
+    # We require a function symbol (not optional).
+    if ("${CONFIG_FUNC_FUNC}" STREQUAL "")
+        message(FATAL_ERROR "No function passed")
+    endif()
+
+    # Check that the configs dependencies are enabled before setting it to a visible enabled state.
+    eval_dependency("${CONFIG_FUNC_DEPENDS}" enabled)
+    if(enabled)
+        set(CMAKE_REQUIRED_LIBRARIES "${CONFIG_FUNC_LIBS}")
+        if((NOT "${WT_ARCH}" STREQUAL "") AND (NOT "${WT_ARCH}" STREQUAL ""))
+            # 'check_symbol_exists' won't use our current cache when test compiling the function symbol.
+            # To get around this we need to ensure we manually forward WT_ARCH and WT_OS as a minimum. This is particularly
+            # needed if 'check_symbol_exists' will leverage one of our toolchain files.
+            set(CMAKE_REQUIRED_FLAGS "-DWT_ARCH=${WT_ARCH} -DWT_OS=${WT_OS}")
+        endif()
+        check_symbol_exists(${CONFIG_FUNC_FUNC} "${CONFIG_FUNC_FILES}" has_symbol_${config_name})
+        set(CMAKE_REQUIRED_LIBRARIES)
+        set(CMAKE_REQUIRED_FLAGS)
+        set(has_symbol "0")
+        if(has_symbol_${config_name})
+            set(has_symbol ${has_symbol_${config_name}})
+        endif()
+        # Set an internal cache variable "${config_name}_DISABLED" to capture its enabled/disabled state.
+        # We want to ensure we capture a transition from a disabled to enabled state when dependencies are met.
+        if(${config_name}_DISABLED)
+            unset(${config_name}_DISABLED CACHE)
+            set(${config_name} ${has_symbol} CACHE STRING "${description}" FORCE)
+        else()
+            set(${config_name} ${has_symbol} CACHE STRING "${description}")
+        endif()
+        # 'check_symbol_exists' sets our given temp variable into the cache. Clear this so it doesn't persist between
+        # configuration runs.
+        unset(has_symbol_${config_name} CACHE)
+    else()
+        # Config doesn't meet dependency requirements, set a disabled state.
+        set(${config_name} 0 CACHE INTERNAL "" FORCE)
+        set(${config_name}_DISABLED ON CACHE INTERNAL "" FORCE)
+    endif()
+endfunction()
+
+
+# config_include(config_name description FILE <include-header> [DEPENDS <deps>])
+# Defines a boolean (0/1) configuration option based on whether a given include header exists.
+# The configuration option is stored in the cmake cache and can be exported to the wiredtiger config header.
+#   config_name - name of the configuration option.
+#   description - docstring to describe the configuration option (viewable in the cmake-gui).
+#   FILE <include-header> - header we want to search for e.g a std header.
+#   DEPENDS <deps> - list of dependencies (semicolon seperated) required for the configuration to be evaluated.
+#       If any of the dependencies aren't met the configuration value will be set to '0' (false).
+function(config_include config_name description)
+    cmake_parse_arguments(
+        PARSE_ARGV
+        2
+        "CONFIG_INCLUDE"
+        ""
+        "FILE;DEPENDS"
+        ""
+    )
+
+    if (NOT "${CONFIG_INCLUDE_UNPARSED_ARGUMENTS}" STREQUAL "")
+        message(FATAL_ERROR "Unknown arguments to config_func: ${CONFIG_INCLUDE_UNPARSED_ARGUMENTS}")
+    endif()
+    # We require a include header (not optional).
+    if ("${CONFIG_INCLUDE_FILE}" STREQUAL "")
+        message(FATAL_ERROR "No include file passed")
+    endif()
+
+    # Check that the configs dependencies are enabled before setting it to a visible enabled state.
+    eval_dependency("${CONFIG_INCLUDE_DEPENDS}" enabled)
+    if(enabled)
+        # 'check_include_files' won't use our current cache when test compiling the include header.
+        # To get around this we need to ensure we manually forward WT_ARCH and WT_OS as a minimum. This is particularly
+        # needed if 'check_include_files' will leverage one of our toolchain files.
+        if((NOT "${WT_ARCH}" STREQUAL "") AND (NOT "${WT_ARCH}" STREQUAL ""))
+            set(CMAKE_REQUIRED_FLAGS "-DWT_ARCH=${WT_ARCH} -DWT_OS=${WT_OS}")
+        endif()
+        check_include_files(${CONFIG_INCLUDE_FILE} has_include_${config_name})
+        set(CMAKE_REQUIRED_FLAGS)
+        set(has_include "0")
+        if(has_include_${config_name})
+            set(has_include ${has_include_${config_name}})
+        endif()
+        # Set an internal cache variable "${config_name}_DISABLED" to capture its enabled/disabled state.
+        # We want to ensure we capture a transition from a disabled to enabled state when dependencies are met.
+        if(${config_name}_DISABLED)
+            unset(${config_name}_DISABLED CACHE)
+            set(${config_name} ${has_include} CACHE STRING "${description}" FORCE)
+        else()
+            set(${config_name} ${has_include} CACHE STRING "${description}")
+        endif()
+        # 'check_include_files' sets our given temp variable into the cache. Clear this so it doesn't persist between
+        # configuration runs.
+        unset(has_include_${config_name} CACHE)
+    else()
+        set(${config_name} OFF CACHE INTERNAL "" FORCE)
+        set(${config_name}_DISABLED ON CACHE INTERNAL "" FORCE)
+    endif()
+    # Set an internal cahce variable with the CPP include statement. We can use this when building out our config header.
+    if (${${config_name}})
+        set(${config_name}_DECL "#include <${CONFIG_INCLUDE_FILE}>" CACHE INTERNAL "")
+    endif()
+endfunction()
+
+# config_lib(config_name description LIB <library> FUNC <function-symbol> [DEPENDS <deps>])
+# Defines a boolean (0/1) configuration option based on whether a given library exists.
+# The configuration option is stored in the cmake cache and can be exported to the wiredtiger config header.
+#   config_name - name of the configuration option.
+#   description - docstring to describe the configuration option (viewable in the cmake-gui).
+#   LIB <library> - library we are searching for (defined as if we are linking against it e.g -lpthread).
+#   FUNC <function-symbol> - function symbol we expect to be available to link against within the library.
+#   DEPENDS <deps> - list of dependencies (semicolon seperated) required for the configuration to be evaluated.
+#       If any of the dependencies aren't met the configuration value will be set to '0' (false).
+function(config_lib config_name description)
+    cmake_parse_arguments(
+        PARSE_ARGV
+        2
+        "CONFIG_LIB"
+        ""
+        "LIB;FUNC;DEPENDS"
+        ""
+    )
+
+    if (NOT "${CONFIG_LIB_UNPARSED_ARGUMENTS}" STREQUAL "")
+        message(FATAL_ERROR "Unknown arguments to config_lib: ${CONFIG_LIB_UNPARSED_ARGUMENTS}")
+    endif()
+    # We require a library (not optional).
+    if ("${CONFIG_LIB_LIB}" STREQUAL "")
+        message(FATAL_ERROR "No library passed")
+    endif()
+    # We require a function within the library (not optional).
+    if ("${CONFIG_LIB_FUNC}" STREQUAL "")
+        message(FATAL_ERROR "No library function passed")
+    endif()
+
+    # Check that the configs dependencies are enabled before setting it to a visible enabled state.
+    eval_dependency("${CONFIG_LIB_DEPENDS}" enabled)
+    if(enabled)
+        # 'check_library_exists' won't use our current cache when test compiling the library.
+        # To get around this we need to ensure we manually forward WT_ARCH and WT_OS as a minimum. This is particularly
+        # needed if 'check_library_exists' will leverage one of our toolchain files.
+        if((NOT "${WT_ARCH}" STREQUAL "") AND (NOT "${WT_ARCH}" STREQUAL ""))
+            set(CMAKE_REQUIRED_FLAGS "-DWT_ARCH=${WT_ARCH} -DWT_OS=${WT_OS}")
+        endif()
+        check_library_exists(${CONFIG_LIB_LIB} ${CONFIG_LIB_FUNC} "" has_lib_${config_name})
+        set(CMAKE_REQUIRED_FLAGS)
+        set(has_lib "0")
+        if(has_lib_${config_name})
+            set(has_lib ${has_lib_${config_name}})
+        endif()
+        # Set an internal cache variable "${config_name}_DISABLED" to capture its enabled/disabled state.
+        # We want to ensure we capture a transition from a disabled to enabled state when dependencies are met.
+        if(${config_name}_DISABLED)
+            unset(${config_name}_DISABLED CACHE)
+            set(${config_name} ${has_lib} CACHE STRING "${description}" FORCE)
+        else()
+            set(${config_name} ${has_lib} CACHE STRING "${description}")
+        endif()
+        # 'check_library_exists' sets our given temp variable into the cache. Clear this so it doesn't persist between
+        # configuration runs.
+        unset(has_lib_${config_name} CACHE)
+    else()
+        set(${config_name} 0 CACHE INTERNAL "" FORCE)
+        set(${config_name}_DISABLED ON CACHE INTERNAL "" FORCE)
+    endif()
+endfunction()
+
+# config_compile(config_name description SOURCE <source-file> [DEPENDS <deps>] [LIBS <library-dependencies>])
+# Defines a boolean (0/1) configuration option based on whether a source file can be successfully compiled and run. Used
+# to determine if more fine grained functionality is supported on a given target environment (beyond what function
+# symbols, libraries and headers are available). The configuration option is stored in the cmake cache and can be
+# exported to the wiredtiger config header.
+#   config_name - name of the configuration option.
+#   description - docstring to describe the configuration option (viewable in the cmake-gui).
+#   SOURCE <source-file> - specific source file we want to test compile.
+#   DEPENDS <deps> - list of dependencies (semicolon seperated) required for the configuration to be evaluated.
+#       If any of the dependencies aren't met the configuration value will be set to '0' (false).
+#   LIBS <library-dependencies> - a list of any additional library dependencies needed to successfully compile the source.
+function(config_compile config_name description)
+    cmake_parse_arguments(
+        PARSE_ARGV
+        2
+        "CONFIG_COMPILE"
+        ""
+        "SOURCE;DEPENDS;LIBS"
+        ""
+    )
+
+    if (NOT "${CONFIG_COMPILE_UNPARSED_ARGUMENTS}" STREQUAL "")
+        message(FATAL_ERROR "Unknown arguments to config_compile: ${CONFIG_COMPILE_UNPARSED_ARGUMENTS}")
+    endif()
+    # We require a source file (not optional).
+    if ("${CONFIG_COMPILE_SOURCE}" STREQUAL "")
+        message(FATAL_ERROR "No source passed")
+    endif()
+
+    # Check that the configs dependencies are enabled before setting it to a visible enabled state.
+    eval_dependency("${CONFIG_COMPILE_DEPENDS}" enabled)
+    if(enabled)
+        # Test compile the source file.
+        try_run(
+            can_run_${config_name} can_compile_${config_name}
+            ${CMAKE_CURRENT_BINARY_DIR}
+            ${CONFIG_COMPILE_SOURCE}
+            CMAKE_FLAGS "-DWT_ARCH=${WT_ARCH}" "-DWT_OS=${WT_OS}"
+            LINK_LIBRARIES "${CONFIG_COMPILE_LIBS}"
+        )
+        set(can_run "0")
+        if((NOT "${can_run_${config_name}}" STREQUAL "FAILED_TO_RUN") AND
+            ("${can_run_${config_name}}" STREQUAL "0"))
+            set(can_run "1")
+        endif()
+        # Set an internal cache variable "${config_name}_DISABLED" to capture its enabled/disabled state.
+        # We want to ensure we capture a transition from a disabled to enabled state when dependencies are met.
+        if(${config_name}_DISABLED)
+            unset(${config_name}_DISABLED CACHE)
+            set(${config_name} ${can_run} CACHE STRING "${description}" FORCE)
+        else()
+            set(${config_name} ${can_run} CACHE STRING "${description}")
+        endif()
+        # 'try_run' sets our given temp variable into the cache. Clear this so it doesn't persist between
+        # configuration runs.
+        unset(can_run_${config_name} CACHE)
+        unset(can_compile_${config_name} CACHE)
+    else()
+        set(${config_name} 0 CACHE INTERNAL "" FORCE)
+        set(${config_name}_DISABLED ON CACHE INTERNAL "" FORCE)
+    endif()
+endfunction()
+
+# test_type_size(type output_size)
+# Helper function that tests for a given types size and returns its value if found.
+#   type - name of the type to test.
+#   output_size - name of the output variable, set with either the types size or "" (empty string)
+#       if not found.
+#   EXTRA_INCLUDES - extra/optional include files to access the given type e.g. a custom typedef in an include header.
+function(test_type_size type output_size)
+    cmake_parse_arguments(
+        PARSE_ARGV
+        2
+        "TEST_TYPE"
+        ""
+        ""
+        "EXTRA_INCLUDES"
+    )
+
+    if (NOT "${TEST_TYPE_UNPARSED_ARGUMENTS}" STREQUAL "")
+        message(FATAL_ERROR "Unknown arguments to assert_type: ${TEST_TYPE_UNPARSED_ARGUMENTS}")
+    endif()
+
+    set(CMAKE_EXTRA_INCLUDE_FILES "${TEST_TYPE_EXTRA_INCLUDES}")
+    check_type_size(${type} TEST_TYPE)
+    set(CMAKE_EXTRA_INCLUDE_FILES)
+
+    if(NOT HAVE_TEST_TYPE)
+        set(${output_size} "" PARENT_SCOPE)
+    else()
+        set(${output_size} ${TEST_TYPE} PARENT_SCOPE)
+    endif()
+endfunction()
+
+# assert_type_size(type size)
+# Wrapper function around 'test_type_size' that additionally asserts whether the given types meets an expected size.
+# Throws a fatal error if the type is not found or doesn't equal the expected size.
+#   type - eame of the type to test.
+#   size - expected size of the type.
+#   EXTRA_INCLUDES - extra/optional include files to access the given type e.g. a custom typedef in an include header.
+function(assert_type_size type size)
+    cmake_parse_arguments(
+        PARSE_ARGV
+        2
+        "ASSERT_TYPE"
+        ""
+        ""
+        "EXTRA_INCLUDES"
+    )
+
+    if (NOT "${ASSERT_TYPE_UNPARSED_ARGUMENTS}" STREQUAL "")
+        message(FATAL_ERROR "Unknown arguments to assert_type: ${ASSERT_TYPE_UNPARSED_ARGUMENTS}")
+    endif()
+
+    set(additional_args "")
+    if(${ASSERT_TYPE_EXTRA_INCLUDES})
+        set(additional_args "EXTRA_INCLUDES ${ASSERT_TYPE_EXTRA_INCLUDES}")
+    endif()
+    test_type_size(${type} output_type_size ${additional_args})
+
+    if(${output_type_size} EQUAL "")
+        # Type does not exist.
+        message(FATAL_ERROR "Type assertion failed: ${type} does not exists")
+    endif()
+
+    if((NOT ${size} EQUAL 0) AND  (NOT ${output_type_size} EQUAL ${size}))
+        # Type does not meet size assertion.
+        message(FATAL_ERROR "Type assertion failed: ${type} does not equal size ${size}")
+    endif()
+endfunction()
+
+# parse_filelist_source(filelist output_var)
+# A helper function that parses the list of sources (usually found in "dist/filelist"). This returning a list of
+# sources that can then be used to generate the necessary build rules for the wiredtiger library. Additionally
+# uses the config values "WT_ARCH" and "WT_OS" when extracting platform specific sources from the file list.
+#   filelist - Destination of 'filelist' file.
+#   output_var - name of the output variable that will be set with the parsed sources. Output variable is set in
+#       the callers scope.
+function(parse_filelist_source filelist output_var)
+    set(arch_host "")
+    set(plat_host "")
+    # Determine architecture host for our filelist parse.
+    if(WT_X86)
+        set(arch_host "X86_HOST")
+    elseif(WT_ARM64)
+        set(arch_host "ARM64_HOST")
+    elseif(WT_PPC64)
+        set(arch_host "POWERPC_HOST")
+    elseif(WT_ZSERIES)
+        set(arch_host "ZSERIES_HOST")
+    endif()
+    # Determine platform host for our filelist parse.
+    if(WT_POSIX)
+        set(plat_host "POSIX_HOST")
+    elseif(WT_WIN)
+        set(plat_host "WINDOWS_HOST")
+    endif()
+
+    # Read file list and parse into list.
+    file(READ "${filelist}" contents NEWLINE_CONSUME)
+    string(REGEX REPLACE "\n" ";" contents "${contents}")
+    set(output_files "")
+    foreach(file ${contents})
+        if(${file} MATCHES "^#.*$")
+            continue()
+        endif()
+        string(REGEX REPLACE "[ \t\r]+" ";" file_contents ${file})
+        list(LENGTH file_contents file_contents_len)
+        if (file_contents_len EQUAL 1)
+            list(APPEND output_files ${file})
+        elseif(file_contents_len EQUAL 2)
+            list(GET file_contents 0 file_name)
+            list(GET file_contents 1 file_group)
+            if ((${file_group} STREQUAL "${plat_host}") OR (${file_group} STREQUAL "${arch_host}"))
+                list(APPEND output_files ${file_name})
+            endif()
+        else()
+            message(FATAL_ERROR "filelist (${filelist}) has an unexpected format [Invalid Line: \"${file}]\"")
+        endif()
+    endforeach()
+    set(${output_var} ${output_files} PARENT_SCOPE)
+endfunction()
diff --git a/build_cmake/install/install.cmake b/build_cmake/install/install.cmake
new file mode 100644
index 00000000000..8573b10ea1d
--- /dev/null
+++ b/build_cmake/install/install.cmake
@@ -0,0 +1,66 @@
+#
+# Public Domain 2014-present MongoDB, Inc.
+# Public Domain 2008-2014 WiredTiger, Inc.
+#  All rights reserved.
+#
+#  See the file LICENSE for redistribution information
+#
+
+include(GNUInstallDirs)
+
+# Library installs
+
+# Define the public headers for wiredtiger library to be used when installing the target.
+set_property(
+    TARGET wiredtiger
+    PROPERTY PUBLIC_HEADER
+    ${CMAKE_BINARY_DIR}/include/wiredtiger.h
+    ${CMAKE_SOURCE_DIR}/src/include/wiredtiger_ext.h
+)
+# Set the version property of the wiredtiger library so we can export a versioned install.
+set_target_properties(wiredtiger PROPERTIES VERSION "${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}")
+
+# Install the wiredtiger library target.
+install(TARGETS wiredtiger
+    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+    PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
+)
+
+# Create our wiredtiger pkgconfig (for POSIX builds).
+if(WT_POSIX)
+    configure_file(${CMAKE_CURRENT_LIST_DIR}/wiredtiger.pc.in wiredtiger.pc @ONLY)
+    install(
+        FILES ${CMAKE_BINARY_DIR}/wiredtiger.pc
+        DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig
+    )
+endif()
+
+# Install our wiredtiger compressor extensions (provided we have enabled/built them).
+if(HAVE_BUILTIN_EXTENSION_LZ4 OR ENABLE_LZ4)
+    install(TARGETS wiredtiger_lz4
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+    )
+endif()
+
+if(HAVE_BUILTIN_EXTENSION_SNAPPY OR ENABLE_SNAPPY)
+    install(TARGETS wiredtiger_snappy
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+    )
+endif()
+
+if(HAVE_BUILTIN_EXTENSION_ZLIB OR ENABLE_ZLIB)
+    install(TARGETS wiredtiger_zlib
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+    )
+endif()
+
+if(HAVE_BUILTIN_EXTENSION_ZSTD OR ENABLE_ZSTD)
+    install(TARGETS wiredtiger_zstd
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+    )
+endif()
diff --git a/build_cmake/install/wiredtiger.pc.in b/build_cmake/install/wiredtiger.pc.in
new file mode 100644
index 00000000000..9ed407b7fe4
--- /dev/null
+++ b/build_cmake/install/wiredtiger.pc.in
@@ -0,0 +1,11 @@
+prefix=@CMAKE_INSTALL_PREFIX@
+exec_prefix=@CMAKE_INSTALL_PREFIX@
+libdir=${exec_prefix}/@CMAKE_INSTALL_LIBDIR@
+includedir=${prefix}/@CMAKE_INSTALL_INCLUDEDIR@
+
+Name: WiredTiger
+Description: The WiredTiger Data Engine
+Requires:
+Version: @VERSION_MAJOR@.@VERSION_MINOR@.@VERSION_PATCH@
+Libs: -L${libdir} -lwiredtiger
+Cflags: -I${includedir}
diff --git a/build_cmake/strict/clang_strict.cmake b/build_cmake/strict/clang_strict.cmake
new file mode 100644
index 00000000000..4ab3fa76ccb
--- /dev/null
+++ b/build_cmake/strict/clang_strict.cmake
@@ -0,0 +1,50 @@
+#
+# Public Domain 2014-present MongoDB, Inc.
+# Public Domain 2008-2014 WiredTiger, Inc.
+#  All rights reserved.
+#
+# See the file LICENSE for redistribution information.
+#
+
+string(APPEND clang_base_c_flags " -Weverything -Werror")
+string(APPEND clang_base_c_flags " -Wno-cast-align")
+string(APPEND clang_base_c_flags " -Wno-documentation-unknown-command")
+string(APPEND clang_base_c_flags " -Wno-format-nonliteral")
+string(APPEND clang_base_c_flags " -Wno-packed")
+string(APPEND clang_base_c_flags " -Wno-padded")
+string(APPEND clang_base_c_flags " -Wno-reserved-id-macro")
+string(APPEND clang_base_c_flags " -Wno-zero-length-array")
+
+# We should turn on cast-qual, but not as a fatal error: see WT-2690.
+# For now, turn it off.
+# string(APPEND clang_base_c_flags "-Wno-error=cast-qual")
+string(APPEND clang_base_c_flags " -Wno-cast-qual")
+
+# Turn off clang thread-safety-analysis, it doesn't like some of the
+# code patterns in WiredTiger.
+string(APPEND clang_base_c_flags " -Wno-thread-safety-analysis")
+
+# On Centos 7.3.1611, system header files aren't compatible with
+# -Wdisabled-macro-expansion.
+string(APPEND clang_base_c_flags " -Wno-disabled-macro-expansion")
+
+# We occasionally use an extra semicolon to indicate an empty loop or
+# conditional body.
+string(APPEND clang_base_c_flags " -Wno-extra-semi-stmt")
+
+# Ignore unrecognized options.
+string(APPEND clang_base_c_flags " -Wno-unknown-warning-option")
+
+if(WT_DARWIN AND (CMAKE_C_COMPILER_VERSION VERSION_EQUAL 4.1))
+    # Apple clang has its own numbering system, and older OS X
+    # releases need some special love. Turn off some flags for
+    # Apple's clang 4.1:
+    #   Apple clang version 4.1
+    #   ((tags/Apple/clang-421.11.66) (based on LLVM 3.1svn)
+    string(APPEND clang_base_c_flags " -Wno-attributes")
+    string(APPEND clang_base_c_flags " -Wno-pedantic")
+    string(APPEND clang_base_c_flags " -Wno-unused-command-line-argument")
+endif()
+
+# Set our base clang flags to ensure it propogates to the rest of our build.
+set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${clang_base_c_flags}" CACHE STRING "" FORCE)
diff --git a/build_cmake/strict/gcc_strict.cmake b/build_cmake/strict/gcc_strict.cmake
new file mode 100644
index 00000000000..d417315fc4b
--- /dev/null
+++ b/build_cmake/strict/gcc_strict.cmake
@@ -0,0 +1,79 @@
+#
+# Public Domain 2014-present MongoDB, Inc.
+# Public Domain 2008-2014 WiredTiger, Inc.
+#  All rights reserved.
+#
+# See the file LICENSE for redistribution information.
+#
+
+string(APPEND gcc_base_c_flags " -Wall")
+string(APPEND gcc_base_c_flags " -Wextra")
+string(APPEND gcc_base_c_flags " -Werror")
+string(APPEND gcc_base_c_flags " -Waggregate-return")
+string(APPEND gcc_base_c_flags " -Wbad-function-cast")
+string(APPEND gcc_base_c_flags " -Wcast-align")
+string(APPEND gcc_base_c_flags " -Wdeclaration-after-statement")
+string(APPEND gcc_base_c_flags " -Wdouble-promotion")
+string(APPEND gcc_base_c_flags " -Wfloat-equal")
+string(APPEND gcc_base_c_flags " -Wformat-nonliteral")
+string(APPEND gcc_base_c_flags " -Wformat-security")
+string(APPEND gcc_base_c_flags " -Wformat=2")
+string(APPEND gcc_base_c_flags " -Winit-self")
+string(APPEND gcc_base_c_flags " -Wjump-misses-init")
+string(APPEND gcc_base_c_flags " -Wmissing-declarations")
+string(APPEND gcc_base_c_flags " -Wmissing-field-initializers")
+string(APPEND gcc_base_c_flags " -Wmissing-prototypes")
+string(APPEND gcc_base_c_flags " -Wnested-externs")
+string(APPEND gcc_base_c_flags " -Wold-style-definition")
+string(APPEND gcc_base_c_flags " -Wpacked")
+string(APPEND gcc_base_c_flags " -Wpointer-arith")
+string(APPEND gcc_base_c_flags " -Wpointer-sign")
+string(APPEND gcc_base_c_flags " -Wredundant-decls")
+string(APPEND gcc_base_c_flags " -Wshadow")
+string(APPEND gcc_base_c_flags " -Wsign-conversion")
+string(APPEND gcc_base_c_flags " -Wstrict-prototypes")
+string(APPEND gcc_base_c_flags " -Wswitch-enum")
+string(APPEND gcc_base_c_flags " -Wundef")
+string(APPEND gcc_base_c_flags " -Wuninitialized")
+string(APPEND gcc_base_c_flags " -Wunreachable-code")
+string(APPEND gcc_base_c_flags " -Wunused")
+string(APPEND gcc_base_c_flags " -Wwrite-strings")
+
+# Non-fatal informational warnings.
+# We don't turn on the unsafe-loop-optimizations warning after gcc7,
+# it's too noisy to tolerate. Regardless, don't fail even when it's
+# configured.
+string(APPEND gcc_base_c_flags " -Wno-error=unsafe-loop-optimizations")
+if(${CMAKE_C_COMPILER_VERSION} VERSION_EQUAL 4.7)
+    string(APPEND gcc_base_c_flags " -Wno-c11-extensions")
+    string(APPEND gcc_base_c_flags " -Wunsafe-loop-optimizations")
+elseif(${CMAKE_C_COMPILER_VERSION} VERSION_EQUAL 5)
+    string(APPEND gcc_base_c_flags " -Wunsafe-loop-optimizations")
+endif()
+
+if(${CMAKE_C_COMPILER_VERSION} VERSION_GREATER_EQUAL 5)
+    string(APPEND gcc_base_c_flags " -Wformat-signedness")
+    string(APPEND gcc_base_c_flags " -Wjump-misses-init")
+    string(APPEND gcc_base_c_flags " -Wredundant-decls")
+    string(APPEND gcc_base_c_flags " -Wunused-macros")
+    string(APPEND gcc_base_c_flags " -Wvariadic-macros")
+endif()
+if(${CMAKE_C_COMPILER_VERSION} VERSION_GREATER_EQUAL 6)
+    string(APPEND gcc_base_c_flags " -Wduplicated-cond")
+    string(APPEND gcc_base_c_flags " -Wlogical-op")
+    string(APPEND gcc_base_c_flags " -Wunused-const-variable=2")
+endif()
+if(${CMAKE_C_COMPILER_VERSION} VERSION_GREATER_EQUAL 7)
+    string(APPEND gcc_base_c_flags " -Walloca")
+    string(APPEND gcc_base_c_flags " -Walloc-zero")
+    string(APPEND gcc_base_c_flags " -Wduplicated-branches")
+    string(APPEND gcc_base_c_flags " -Wformat-overflow=2")
+    string(APPEND gcc_base_c_flags " -Wformat-truncation=2")
+    string(APPEND gcc_base_c_flags " -Wrestrict")
+endif()
+if(${CMAKE_C_COMPILER_VERSION} VERSION_GREATER_EQUAL 8)
+    string(APPEND gcc_base_c_flags " -Wmultistatement-macros")
+endif()
+
+# Set our base gcc flags to ensure it propogates to the rest of our build.
+set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${gcc_base_c_flags}" CACHE STRING "" FORCE)
diff --git a/build_cmake/toolchains/clang.cmake b/build_cmake/toolchains/clang.cmake
new file mode 100644
index 00000000000..252f935976f
--- /dev/null
+++ b/build_cmake/toolchains/clang.cmake
@@ -0,0 +1,36 @@
+#
+# Public Domain 2014-present MongoDB, Inc.
+# Public Domain 2008-2014 WiredTiger, Inc.
+#  All rights reserved.
+#
+# See the file LICENSE for redistribution information.
+#
+
+cmake_minimum_required(VERSION 3.11.0)
+
+set(CMAKE_C_COMPILER "clang")
+set(CMAKE_C_COMPILER_ID "Clang")
+
+set(CMAKE_CXX_COMPILER "clang++")
+set(CMAKE_CXX_COMPILER_ID "Clang++")
+
+set(CMAKE_ASM_COMPILER "clang")
+set(CMAKE_ASM_COMPILER_ID "Clang")
+
+if(NOT "${COMPILE_DEFINITIONS}" STREQUAL "")
+    ### Additional check to overcome check_[symbol|include|function]_exits using toolchain file without passing WT_ARCH and WT_OS.
+    string(REGEX MATCH "-DWT_ARCH=([A-Za-z0-9]+) -DWT_OS=([A-Za-z0-9]+)" _ ${COMPILE_DEFINITIONS})
+    set(wt_config_arch ${CMAKE_MATCH_1})
+    set(wt_config_os ${CMAKE_MATCH_2})
+else()
+    set(wt_config_arch ${WT_ARCH})
+    set(wt_config_os ${WT_OS})
+endif()
+
+# Include any platform specific clang configurations and flags e.g. target-tuple, flags.
+if((NOT "${wt_config_arch}" STREQUAL "") AND (NOT "${wt_config_os}" STREQUAL ""))
+    if(NOT EXISTS "${CMAKE_CURRENT_LIST_DIR}/${wt_config_arch}/${wt_config_os}/plat_clang.cmake")
+        message(FATAL_ERROR "(${wt_config_arch}/${wt_config_os}) directory does not have a plat_clang.cmake file")
+    endif()
+    include("${CMAKE_CURRENT_LIST_DIR}/${wt_config_arch}/${wt_config_os}/plat_clang.cmake")
+endif()
diff --git a/build_cmake/toolchains/gcc.cmake b/build_cmake/toolchains/gcc.cmake
new file mode 100644
index 00000000000..25333335a2e
--- /dev/null
+++ b/build_cmake/toolchains/gcc.cmake
@@ -0,0 +1,31 @@
+#
+# Public Domain 2014-present MongoDB, Inc.
+# Public Domain 2008-2014 WiredTiger, Inc.
+#  All rights reserved.
+#
+# See the file LICENSE for redistribution information.
+#
+
+cmake_minimum_required(VERSION 3.11.0)
+
+if(NOT "${COMPILE_DEFINITIONS}" STREQUAL "")
+    ### Additional check to overcome check_[symbol|include|function]_exits using toolchain file without passing WT_ARCH and WT_OS.
+    string(REGEX MATCH "-DWT_ARCH=([A-Za-z0-9]+) -DWT_OS=([A-Za-z0-9]+)" _ ${COMPILE_DEFINITIONS})
+    set(wt_config_arch ${CMAKE_MATCH_1})
+    set(wt_config_os ${CMAKE_MATCH_2})
+else()
+    set(wt_config_arch ${WT_ARCH})
+    set(wt_config_os ${WT_OS})
+endif()
+
+# Include any platform specific gcc configurations and flags e.g. target-tuple, flags.
+if((NOT "${wt_config_arch}" STREQUAL "") AND (NOT "${wt_config_os}" STREQUAL ""))
+    if(NOT EXISTS "${CMAKE_CURRENT_LIST_DIR}/${wt_config_arch}/${wt_config_os}/plat_gcc.cmake")
+        message(FATAL_ERROR "(${wt_config_arch}/${wt_config_os}) directory does not have a plat_gcc.cmake file")
+    endif()
+    include("${CMAKE_CURRENT_LIST_DIR}/${wt_config_arch}/${wt_config_os}/plat_gcc.cmake")
+endif()
+
+set(CMAKE_C_COMPILER "${CROSS_COMPILER_PREFIX}gcc")
+set(CMAKE_CXX_COMPILER "${CROSS_COMPILER_PREFIX}g++")
+set(CMAKE_ASM_COMPILER "${CROSS_COMPILER_PREFIX}gcc")
diff --git a/build_cmake/toolchains/x86/darwin/plat_clang.cmake b/build_cmake/toolchains/x86/darwin/plat_clang.cmake
new file mode 100644
index 00000000000..da6aa0762b2
--- /dev/null
+++ b/build_cmake/toolchains/x86/darwin/plat_clang.cmake
@@ -0,0 +1,14 @@
+#
+# Public Domain 2014-present MongoDB, Inc.
+# Public Domain 2008-2014 WiredTiger, Inc.
+#  All rights reserved.
+#
+# See the file LICENSE for redistribution information.
+#
+
+set(TRIPLE_TARGET "x86_64-apple-darwin")
+
+set(CROSS_COMPILER_PREFIX ${TRIPLE_TARGET}-)
+set(CMAKE_C_COMPILER_TARGET "${TRIPLE_TARGET}")
+set(CMAKE_CXX_COMPILER_TARGET "${TRIPLE_TARGET}")
+set(CMAKE_ASM_COMPILER_TARGET "${TRIPLE_TARGET}")
diff --git a/build_cmake/toolchains/x86/darwin/plat_gcc.cmake b/build_cmake/toolchains/x86/darwin/plat_gcc.cmake
new file mode 100644
index 00000000000..8ec2f561e54
--- /dev/null
+++ b/build_cmake/toolchains/x86/darwin/plat_gcc.cmake
@@ -0,0 +1,14 @@
+#
+# Public Domain 2014-present MongoDB, Inc.
+# Public Domain 2008-2014 WiredTiger, Inc.
+#  All rights reserved.
+#
+# See the file LICENSE for redistribution information.
+#
+
+# We are not cross-compiling if our system is Darwin, hence the "x86_64-apple-darwin-"
+# prefix is not necessary when we are not cross-compiling. Just default to the host
+# installed 'gcc' binary.
+if (NOT "${CMAKE_HOST_SYSTEM_NAME}" STREQUAL "Darwin")
+    set(CROSS_COMPILER_PREFIX "x86_64-apple-darwin-" CACHE INTERNAL "" FORCE)
+endif()
diff --git a/build_cmake/toolchains/x86/linux/plat_clang.cmake b/build_cmake/toolchains/x86/linux/plat_clang.cmake
new file mode 100644
index 00000000000..7eb4615b92d
--- /dev/null
+++ b/build_cmake/toolchains/x86/linux/plat_clang.cmake
@@ -0,0 +1,14 @@
+#
+# Public Domain 2014-present MongoDB, Inc.
+# Public Domain 2008-2014 WiredTiger, Inc.
+#  All rights reserved.
+#
+# See the file LICENSE for redistribution information.
+#
+
+set(TRIPLE_TARGET "x86_64-pc-linux-gnu")
+
+set(CROSS_COMPILER_PREFIX ${TRIPLE_TARGET}-)
+set(CMAKE_C_COMPILER_TARGET "${TRIPLE_TARGET}")
+set(CMAKE_CXX_COMPILER_TARGET "${TRIPLE_TARGET}")
+set(CMAKE_ASM_COMPILER_TARGET "${TRIPLE_TARGET}")
diff --git a/build_cmake/toolchains/x86/linux/plat_gcc.cmake b/build_cmake/toolchains/x86/linux/plat_gcc.cmake
new file mode 100644
index 00000000000..fc1f4307a08
--- /dev/null
+++ b/build_cmake/toolchains/x86/linux/plat_gcc.cmake
@@ -0,0 +1,9 @@
+#
+# Public Domain 2014-present MongoDB, Inc.
+# Public Domain 2008-2014 WiredTiger, Inc.
+#  All rights reserved.
+#
+# See the file LICENSE for redistribution information.
+#
+
+set(CROSS_COMPILER_PREFIX "x86_64-linux-gnu-" CACHE INTERNAL "" FORCE)
diff --git a/ext/CMakeLists.txt b/ext/CMakeLists.txt
new file mode 100644
index 00000000000..ff640a28f18
--- /dev/null
+++ b/ext/CMakeLists.txt
@@ -0,0 +1,55 @@
+#
+# Public Domain 2014-present MongoDB, Inc.
+# Public Domain 2008-2014 WiredTiger, Inc.
+#
+# This is free and unencumbered software released into the public domain.
+#
+# Anyone is free to copy, modify, publish, use, compile, sell, or
+# distribute this software, either in source code form or as a compiled
+# binary, for any purpose, commercial or non-commercial, and by any
+# means.
+#
+# In jurisdictions that recognize copyright laws, the author or authors
+# of this software dedicate any and all copyright interest in the
+# software to the public domain. We make this dedication for the benefit
+# of the public at large and to the detriment of our heirs and
+# successors. We intend this dedication to be an overt act of
+# relinquishment in perpetuity of all present and future rights to this
+# software under copyright law.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
+# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
+# OTHER DEALINGS IN THE SOFTWARE.
+#
+
+project(ext C)
+
+# Build the compressor extensions.
+add_subdirectory(compressors/lz4)
+add_subdirectory(compressors/snappy)
+add_subdirectory(compressors/zlib)
+add_subdirectory(compressors/zstd)
+add_subdirectory(compressors/nop)
+
+# Build the collator extensions.
+add_subdirectory(collators/reverse)
+add_subdirectory(collators/revint)
+
+# Build the encryptor extensions.
+add_subdirectory(encryptors/nop)
+add_subdirectory(encryptors/rotn)
+
+# Build the extractor extensions.
+add_subdirectory(extractors/csv)
+
+# Build the storage_sources extensions.
+if(WT_POSIX)
+    add_subdirectory(storage_sources/local_store)
+endif()
+
+# Build the test extensions.
+add_subdirectory(test/fail_fs)
diff --git a/ext/collators/reverse/CMakeLists.txt b/ext/collators/reverse/CMakeLists.txt
new file mode 100644
index 00000000000..5f1d28fe3d0
--- /dev/null
+++ b/ext/collators/reverse/CMakeLists.txt
@@ -0,0 +1,40 @@
+#
+# Public Domain 2014-present MongoDB, Inc.
+# Public Domain 2008-2014 WiredTiger, Inc.
+#
+# This is free and unencumbered software released into the public domain.
+#
+# Anyone is free to copy, modify, publish, use, compile, sell, or
+# distribute this software, either in source code form or as a compiled
+# binary, for any purpose, commercial or non-commercial, and by any
+# means.
+#
+# In jurisdictions that recognize copyright laws, the author or authors
+# of this software dedicate any and all copyright interest in the
+# software to the public domain. We make this dedication for the benefit
+# of the public at large and to the detriment of our heirs and
+# successors. We intend this dedication to be an overt act of
+# relinquishment in perpetuity of all present and future rights to this
+# software under copyright law.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
+# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
+# OTHER DEALINGS IN THE SOFTWARE.
+#
+
+project(reverse_collator C)
+
+set(sources "reverse_collator.c")
+add_library(wiredtiger_reverse_collator MODULE ${sources})
+
+target_include_directories(
+    wiredtiger_reverse_collator
+    PRIVATE
+        ${CMAKE_SOURCE_DIR}/src/include
+        ${CMAKE_BINARY_DIR}/include
+        ${CMAKE_BINARY_DIR}/config
+)
diff --git a/ext/collators/revint/CMakeLists.txt b/ext/collators/revint/CMakeLists.txt
new file mode 100644
index 00000000000..8343a56b256
--- /dev/null
+++ b/ext/collators/revint/CMakeLists.txt
@@ -0,0 +1,40 @@
+#
+# Public Domain 2014-present MongoDB, Inc.
+# Public Domain 2008-2014 WiredTiger, Inc.
+#
+# This is free and unencumbered software released into the public domain.
+#
+# Anyone is free to copy, modify, publish, use, compile, sell, or
+# distribute this software, either in source code form or as a compiled
+# binary, for any purpose, commercial or non-commercial, and by any
+# means.
+#
+# In jurisdictions that recognize copyright laws, the author or authors
+# of this software dedicate any and all copyright interest in the
+# software to the public domain. We make this dedication for the benefit
+# of the public at large and to the detriment of our heirs and
+# successors. We intend this dedication to be an overt act of
+# relinquishment in perpetuity of all present and future rights to this
+# software under copyright law.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
+# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
+# OTHER DEALINGS IN THE SOFTWARE.
+#
+
+project(revint_collator C)
+
+set(sources "revint_collator.c")
+add_library(wiredtiger_revint_collator MODULE ${sources})
+
+target_include_directories(
+    wiredtiger_revint_collator
+    PRIVATE
+        ${CMAKE_SOURCE_DIR}/src/include
+        ${CMAKE_BINARY_DIR}/include
+        ${CMAKE_BINARY_DIR}/config
+)
diff --git a/ext/compressors/lz4/CMakeLists.txt b/ext/compressors/lz4/CMakeLists.txt
new file mode 100644
index 00000000000..48a45e095ae
--- /dev/null
+++ b/ext/compressors/lz4/CMakeLists.txt
@@ -0,0 +1,66 @@
+#
+# Public Domain 2014-present MongoDB, Inc.
+# Public Domain 2008-2014 WiredTiger, Inc.
+#
+# This is free and unencumbered software released into the public domain.
+#
+# Anyone is free to copy, modify, publish, use, compile, sell, or
+# distribute this software, either in source code form or as a compiled
+# binary, for any purpose, commercial or non-commercial, and by any
+# means.
+#
+# In jurisdictions that recognize copyright laws, the author or authors
+# of this software dedicate any and all copyright interest in the
+# software to the public domain. We make this dedication for the benefit
+# of the public at large and to the detriment of our heirs and
+# successors. We intend this dedication to be an overt act of
+# relinquishment in perpetuity of all present and future rights to this
+# software under copyright law.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
+# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
+# OTHER DEALINGS IN THE SOFTWARE.
+#
+
+project(lz4 C)
+
+config_bool(
+    HAVE_BUILTIN_EXTENSION_LZ4
+    "Builtin lz4 compression library."
+    DEFAULT OFF
+    DEPENDS "HAVE_LIBLZ4"
+    DEPENDS_ERROR ON "Failed to find lz4 library."
+)
+
+if (HAVE_BUILTIN_EXTENSION_LZ4 AND ENABLE_LZ4)
+    message(FATAL_ERROR "Only one of 'ENABLE_LZ4' or 'HAVE_BUILTIN_EXTENSION_LZ4' can be enabled.")
+endif()
+
+set(sources "lz4_compress.c")
+set(link_type)
+
+if(HAVE_BUILTIN_EXTENSION_LZ4)
+    if(ENABLE_STATIC)
+        set(link_type "STATIC")
+    else()
+        set(link_type "SHARED")
+    endif()
+else()
+    set(link_type "MODULE")
+endif()
+
+if(HAVE_BUILTIN_EXTENSION_LZ4 OR ENABLE_LZ4)
+    add_library(wiredtiger_lz4 ${link_type} ${sources})
+    target_link_libraries(wiredtiger_lz4 "lz4")
+    target_include_directories(
+        wiredtiger_lz4
+        PRIVATE
+            ${CMAKE_SOURCE_DIR}/src/include
+            ${CMAKE_BINARY_DIR}/include
+            ${CMAKE_BINARY_DIR}/config
+        )
+endif()
diff --git a/ext/compressors/nop/CMakeLists.txt b/ext/compressors/nop/CMakeLists.txt
new file mode 100644
index 00000000000..37fc108a4f3
--- /dev/null
+++ b/ext/compressors/nop/CMakeLists.txt
@@ -0,0 +1,40 @@
+#
+# Public Domain 2014-present MongoDB, Inc.
+# Public Domain 2008-2014 WiredTiger, Inc.
+#
+# This is free and unencumbered software released into the public domain.
+#
+# Anyone is free to copy, modify, publish, use, compile, sell, or
+# distribute this software, either in source code form or as a compiled
+# binary, for any purpose, commercial or non-commercial, and by any
+# means.
+#
+# In jurisdictions that recognize copyright laws, the author or authors
+# of this software dedicate any and all copyright interest in the
+# software to the public domain. We make this dedication for the benefit
+# of the public at large and to the detriment of our heirs and
+# successors. We intend this dedication to be an overt act of
+# relinquishment in perpetuity of all present and future rights to this
+# software under copyright law.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
+# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
+# OTHER DEALINGS IN THE SOFTWARE.
+#
+
+project(nop_compression C)
+
+set(sources "nop_compress.c")
+add_library(wiredtiger_nop_compress SHARED ${sources})
+
+target_include_directories(
+    wiredtiger_nop_compress
+    PRIVATE
+        ${CMAKE_SOURCE_DIR}/src/include
+        ${CMAKE_BINARY_DIR}/include
+        ${CMAKE_BINARY_DIR}/config
+)
diff --git a/ext/compressors/snappy/CMakeLists.txt b/ext/compressors/snappy/CMakeLists.txt
new file mode 100644
index 00000000000..04a675f370e
--- /dev/null
+++ b/ext/compressors/snappy/CMakeLists.txt
@@ -0,0 +1,65 @@
+#
+# Public Domain 2014-present MongoDB, Inc.
+# Public Domain 2008-2014 WiredTiger, Inc.
+#
+# This is free and unencumbered software released into the public domain.
+#
+# Anyone is free to copy, modify, publish, use, compile, sell, or
+# distribute this software, either in source code form or as a compiled
+# binary, for any purpose, commercial or non-commercial, and by any
+# means.
+#
+# In jurisdictions that recognize copyright laws, the author or authors
+# of this software dedicate any and all copyright interest in the
+# software to the public domain. We make this dedication for the benefit
+# of the public at large and to the detriment of our heirs and
+# successors. We intend this dedication to be an overt act of
+# relinquishment in perpetuity of all present and future rights to this
+# software under copyright law.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
+# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
+# OTHER DEALINGS IN THE SOFTWARE.
+#
+
+project(snappy C)
+
+config_bool(
+    HAVE_BUILTIN_EXTENSION_SNAPPY
+    "Builtin snappy compression library."
+    DEFAULT OFF
+    DEPENDS "HAVE_LIBSNAPPY"
+    DEPENDS_ERROR ON "Failed to find snappy library."
+)
+
+if (HAVE_BUILTIN_EXTENSION_SNAPPY AND ENABLE_SNAPPY)
+    message(FATAL_ERROR "Only one of 'ENABLE_SNAPPY' or 'HAVE_BUILTIN_EXTENSION_SNAPPY' can be enabled.")
+endif()
+
+set(sources "snappy_compress.c")
+set(link_type)
+if(HAVE_BUILTIN_EXTENSION_SNAPPY)
+    if(ENABLE_STATIC)
+        set(link_type "STATIC")
+    else()
+        set(link_type "SHARED")
+    endif()
+else()
+    set(link_type "MODULE")
+endif()
+
+if(HAVE_BUILTIN_EXTENSION_SNAPPY OR ENABLE_SNAPPY)
+    add_library(wiredtiger_snappy ${link_type} ${sources})
+    target_link_libraries(wiredtiger_snappy "snappy")
+    target_include_directories(
+        wiredtiger_snappy
+        PRIVATE
+            ${CMAKE_SOURCE_DIR}/src/include
+            ${CMAKE_BINARY_DIR}/include
+            ${CMAKE_BINARY_DIR}/config
+        )
+endif()
diff --git a/ext/compressors/zlib/CMakeLists.txt b/ext/compressors/zlib/CMakeLists.txt
new file mode 100644
index 00000000000..cadb7eb98bb
--- /dev/null
+++ b/ext/compressors/zlib/CMakeLists.txt
@@ -0,0 +1,65 @@
+#
+# Public Domain 2014-present MongoDB, Inc.
+# Public Domain 2008-2014 WiredTiger, Inc.
+#
+# This is free and unencumbered software released into the public domain.
+#
+# Anyone is free to copy, modify, publish, use, compile, sell, or
+# distribute this software, either in source code form or as a compiled
+# binary, for any purpose, commercial or non-commercial, and by any
+# means.
+#
+# In jurisdictions that recognize copyright laws, the author or authors
+# of this software dedicate any and all copyright interest in the
+# software to the public domain. We make this dedication for the benefit
+# of the public at large and to the detriment of our heirs and
+# successors. We intend this dedication to be an overt act of
+# relinquishment in perpetuity of all present and future rights to this
+# software under copyright law.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
+# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
+# OTHER DEALINGS IN THE SOFTWARE.
+#
+
+project(zlib C)
+
+config_bool(
+    HAVE_BUILTIN_EXTENSION_ZLIB
+    "Builtin zlib compression library."
+    DEFAULT OFF
+    DEPENDS "HAVE_LIBZ"
+    DEPENDS_ERROR ON "Failed to find zlib library."
+)
+
+if (HAVE_BUILTIN_EXTENSION_ZLIB AND ENABLE_ZLIB)
+    message(FATAL_ERROR "Only one of 'ENABLE_ZLIB' or 'HAVE_BUILTIN_EXTENSION_ZLIB' can be enabled.")
+endif()
+
+set(sources "zlib_compress.c")
+set(link_type)
+if(HAVE_BUILTIN_EXTENSION_ZLIB)
+    if(ENABLE_STATIC)
+        set(link_type "STATIC")
+    else()
+        set(link_type "SHARED")
+    endif()
+else()
+    set(link_type "MODULE")
+endif()
+
+if(HAVE_BUILTIN_EXTENSION_ZLIB OR ENABLE_ZLIB)
+    add_library(wiredtiger_zlib ${link_type} ${sources})
+    target_link_libraries(wiredtiger_zlib "z")
+    target_include_directories(
+        wiredtiger_zlib
+        PRIVATE
+            ${CMAKE_SOURCE_DIR}/src/include
+            ${CMAKE_BINARY_DIR}/include
+            ${CMAKE_BINARY_DIR}/config
+        )
+endif()
diff --git a/ext/compressors/zstd/CMakeLists.txt b/ext/compressors/zstd/CMakeLists.txt
new file mode 100644
index 00000000000..e723802c995
--- /dev/null
+++ b/ext/compressors/zstd/CMakeLists.txt
@@ -0,0 +1,64 @@
+#
+# Public Domain 2014-present MongoDB, Inc.
+# Public Domain 2008-2014 WiredTiger, Inc.
+#
+# This is free and unencumbered software released into the public domain.
+#
+# Anyone is free to copy, modify, publish, use, compile, sell, or
+# distribute this software, either in source code form or as a compiled
+# binary, for any purpose, commercial or non-commercial, and by any
+# means.
+#
+# In jurisdictions that recognize copyright laws, the author or authors
+# of this software dedicate any and all copyright interest in the
+# software to the public domain. We make this dedication for the benefit
+# of the public at large and to the detriment of our heirs and
+# successors. We intend this dedication to be an overt act of
+# relinquishment in perpetuity of all present and future rights to this
+# software under copyright law.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
+# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
+# OTHER DEALINGS IN THE SOFTWARE.
+#
+
+project(zstd C)
+
+config_bool(
+    HAVE_BUILTIN_EXTENSION_ZSTD
+    "Builtin zstd compression library."
+    DEFAULT OFF
+    DEPENDS "HAVE_LIBZSTD"
+    DEPENDS_ERROR ON "Failed to find zstd library."
+)
+
+if (HAVE_BUILTIN_EXTENSION_ZSTD AND ENABLE_ZSTD)
+    message(FATAL_ERROR "Only one of 'ENABLE_ZSTD' or 'HAVE_BUILTIN_EXTENSION_ZSTD' can be enabled.")
+endif()
+
+set(sources "zstd_compress.c")
+if(HAVE_BUILTIN_EXTENSION_ZSTD)
+    if(ENABLE_STATIC)
+        set(link_type "STATIC")
+    else()
+        set(link_type "SHARED")
+    endif()
+else()
+    set(link_type "MODULE")
+endif()
+
+if(HAVE_BUILTIN_EXTENSION_ZSTD OR ENABLE_ZSTD)
+    add_library(wiredtiger_zstd ${link_type} ${sources})
+    target_link_libraries(wiredtiger_zstd "zstd")
+    target_include_directories(
+        wiredtiger_zstd
+        PRIVATE
+            ${CMAKE_SOURCE_DIR}/src/include
+            ${CMAKE_BINARY_DIR}/include
+            ${CMAKE_BINARY_DIR}/config
+        )
+endif()
diff --git a/ext/encryptors/nop/CMakeLists.txt b/ext/encryptors/nop/CMakeLists.txt
new file mode 100644
index 00000000000..6e5afe14a5a
--- /dev/null
+++ b/ext/encryptors/nop/CMakeLists.txt
@@ -0,0 +1,40 @@
+#
+# Public Domain 2014-present MongoDB, Inc.
+# Public Domain 2008-2014 WiredTiger, Inc.
+#
+# This is free and unencumbered software released into the public domain.
+#
+# Anyone is free to copy, modify, publish, use, compile, sell, or
+# distribute this software, either in source code form or as a compiled
+# binary, for any purpose, commercial or non-commercial, and by any
+# means.
+#
+# In jurisdictions that recognize copyright laws, the author or authors
+# of this software dedicate any and all copyright interest in the
+# software to the public domain. We make this dedication for the benefit
+# of the public at large and to the detriment of our heirs and
+# successors. We intend this dedication to be an overt act of
+# relinquishment in perpetuity of all present and future rights to this
+# software under copyright law.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
+# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
+# OTHER DEALINGS IN THE SOFTWARE.
+#
+
+project(nop_encrypt C)
+
+set(sources "nop_encrypt.c")
+add_library(wiredtiger_nop_encrypt MODULE ${sources})
+
+target_include_directories(
+    wiredtiger_nop_encrypt
+    PRIVATE
+        ${CMAKE_SOURCE_DIR}/src/include
+        ${CMAKE_BINARY_DIR}/include
+        ${CMAKE_BINARY_DIR}/config
+)
diff --git a/ext/encryptors/rotn/CMakeLists.txt b/ext/encryptors/rotn/CMakeLists.txt
new file mode 100644
index 00000000000..390dceb4679
--- /dev/null
+++ b/ext/encryptors/rotn/CMakeLists.txt
@@ -0,0 +1,40 @@
+#
+# Public Domain 2014-present MongoDB, Inc.
+# Public Domain 2008-2014 WiredTiger, Inc.
+#
+# This is free and unencumbered software released into the public domain.
+#
+# Anyone is free to copy, modify, publish, use, compile, sell, or
+# distribute this software, either in source code form or as a compiled
+# binary, for any purpose, commercial or non-commercial, and by any
+# means.
+#
+# In jurisdictions that recognize copyright laws, the author or authors
+# of this software dedicate any and all copyright interest in the
+# software to the public domain. We make this dedication for the benefit
+# of the public at large and to the detriment of our heirs and
+# successors. We intend this dedication to be an overt act of
+# relinquishment in perpetuity of all present and future rights to this
+# software under copyright law.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
+# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
+# OTHER DEALINGS IN THE SOFTWARE.
+#
+
+project(rotn_encrypt C)
+
+set(sources "rotn_encrypt.c")
+add_library(wiredtiger_rotn_encrypt MODULE ${sources})
+
+target_include_directories(
+    wiredtiger_rotn_encrypt
+    PRIVATE
+        ${CMAKE_SOURCE_DIR}/src/include
+        ${CMAKE_BINARY_DIR}/include
+        ${CMAKE_BINARY_DIR}/config
+)
diff --git a/ext/extractors/csv/CMakeLists.txt b/ext/extractors/csv/CMakeLists.txt
new file mode 100644
index 00000000000..58b55601573
--- /dev/null
+++ b/ext/extractors/csv/CMakeLists.txt
@@ -0,0 +1,40 @@
+#
+# Public Domain 2014-present MongoDB, Inc.
+# Public Domain 2008-2014 WiredTiger, Inc.
+#
+# This is free and unencumbered software released into the public domain.
+#
+# Anyone is free to copy, modify, publish, use, compile, sell, or
+# distribute this software, either in source code form or as a compiled
+# binary, for any purpose, commercial or non-commercial, and by any
+# means.
+#
+# In jurisdictions that recognize copyright laws, the author or authors
+# of this software dedicate any and all copyright interest in the
+# software to the public domain. We make this dedication for the benefit
+# of the public at large and to the detriment of our heirs and
+# successors. We intend this dedication to be an overt act of
+# relinquishment in perpetuity of all present and future rights to this
+# software under copyright law.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
+# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
+# OTHER DEALINGS IN THE SOFTWARE.
+#
+
+project(csv C)
+
+set(sources "csv_extractor.c")
+add_library(wiredtiger_csv_extractor MODULE ${sources})
+
+target_include_directories(
+    wiredtiger_csv_extractor
+    PRIVATE
+        ${CMAKE_SOURCE_DIR}/src/include
+        ${CMAKE_BINARY_DIR}/include
+        ${CMAKE_BINARY_DIR}/config
+)
diff --git a/ext/storage_sources/local_store/CMakeLists.txt b/ext/storage_sources/local_store/CMakeLists.txt
new file mode 100644
index 00000000000..76e504d6440
--- /dev/null
+++ b/ext/storage_sources/local_store/CMakeLists.txt
@@ -0,0 +1,40 @@
+#
+# Public Domain 2014-present MongoDB, Inc.
+# Public Domain 2008-2014 WiredTiger, Inc.
+#
+# This is free and unencumbered software released into the public domain.
+#
+# Anyone is free to copy, modify, publish, use, compile, sell, or
+# distribute this software, either in source code form or as a compiled
+# binary, for any purpose, commercial or non-commercial, and by any
+# means.
+#
+# In jurisdictions that recognize copyright laws, the author or authors
+# of this software dedicate any and all copyright interest in the
+# software to the public domain. We make this dedication for the benefit
+# of the public at large and to the detriment of our heirs and
+# successors. We intend this dedication to be an overt act of
+# relinquishment in perpetuity of all present and future rights to this
+# software under copyright law.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
+# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
+# OTHER DEALINGS IN THE SOFTWARE.
+#
+
+project(local_store C)
+
+set(sources "local_store.c")
+add_library(wiredtiger_local_store MODULE ${sources})
+
+target_include_directories(
+    wiredtiger_local_store
+    PRIVATE
+        ${CMAKE_SOURCE_DIR}/src/include
+        ${CMAKE_BINARY_DIR}/include
+        ${CMAKE_BINARY_DIR}/config
+)
diff --git a/ext/test/fail_fs/CMakeLists.txt b/ext/test/fail_fs/CMakeLists.txt
new file mode 100644
index 00000000000..da2eb908c6c
--- /dev/null
+++ b/ext/test/fail_fs/CMakeLists.txt
@@ -0,0 +1,40 @@
+#
+# Public Domain 2014-present MongoDB, Inc.
+# Public Domain 2008-2014 WiredTiger, Inc.
+#
+# This is free and unencumbered software released into the public domain.
+#
+# Anyone is free to copy, modify, publish, use, compile, sell, or
+# distribute this software, either in source code form or as a compiled
+# binary, for any purpose, commercial or non-commercial, and by any
+# means.
+#
+# In jurisdictions that recognize copyright laws, the author or authors
+# of this software dedicate any and all copyright interest in the
+# software to the public domain. We make this dedication for the benefit
+# of the public at large and to the detriment of our heirs and
+# successors. We intend this dedication to be an overt act of
+# relinquishment in perpetuity of all present and future rights to this
+# software under copyright law.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
+# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
+# OTHER DEALINGS IN THE SOFTWARE.
+#
+
+project(fail_fs C)
+
+set(sources "fail_fs.c")
+add_library(wiredtiger_fail_fs MODULE ${sources})
+
+target_include_directories(
+    wiredtiger_fail_fs
+    PRIVATE
+        ${CMAKE_SOURCE_DIR}/src/include
+        ${CMAKE_BINARY_DIR}/include
+        ${CMAKE_BINARY_DIR}/config
+)
